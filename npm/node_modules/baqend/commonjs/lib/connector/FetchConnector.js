"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchConnector = void 0;
var Connector_1 = require("./Connector");
var FetchConnector = /** @class */ (function (_super) {
    __extends(FetchConnector, _super);
    function FetchConnector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Indicates if this connector implementation is usable for the given host and port
     * @return
     */
    FetchConnector.isUsable = function () {
        return typeof fetch !== 'undefined';
    };
    /**
     * @inheritDoc
     */
    FetchConnector.prototype.doSend = function (message, request, receive) {
        var url = this.origin + this.basePath + request.path;
        var method = request.method;
        var headers = request.headers;
        var entity = request.entity;
        var credentials = message.withCredentials ? 'include' : 'same-origin';
        return fetch(url, {
            method: method,
            headers: headers,
            body: entity,
            credentials: credentials,
        }).then(function (res) {
            var responseHeaders = {};
            Connector_1.Connector.RESPONSE_HEADERS.forEach(function (name) {
                responseHeaders[name] = res.headers.get ? res.headers.get(name) : res.headers[name];
            });
            var response = {
                headers: responseHeaders,
                status: res.status,
                entity: res,
            };
            receive(response);
        });
    };
    /**
     * @inheritDoc
     */
    FetchConnector.prototype.fromFormat = function (response, rawEntity, type) {
        if (type === 'json') {
            return rawEntity.json();
        }
        if (type === 'blob') {
            return rawEntity.blob();
        }
        if (type === 'data-url' || type === 'base64') {
            return rawEntity.blob().then(function (entity) {
                var reader = new FileReader();
                reader.readAsDataURL(entity);
                return new Promise(function (resolve, reject) {
                    reader.onload = resolve;
                    reader.onerror = reject;
                }).then(function () {
                    var result = reader.result;
                    if (type === 'base64') {
                        result = result.substring(result.indexOf(',') + 1);
                    }
                    return result;
                });
            });
        }
        return rawEntity;
    };
    /**
     * @inheritDoc
     */
    FetchConnector.prototype.toFormat = function (message) {
        var type = message.request.type;
        if (type) {
            var entity = message.request.entity;
            var mimeType = message.mimeType();
            switch (type) {
                case 'blob':
                    mimeType = mimeType || entity.type;
                    break;
                case 'arraybuffer':
                case 'form':
                    break;
                case 'data-url': {
                    var match = entity.match(/^data:(.+?)(;base64)?,(.*)$/);
                    var isBase64 = match[2];
                    // eslint-disable-next-line prefer-destructuring
                    entity = match[3];
                    type = 'blob';
                    mimeType = mimeType || match[1];
                    if (!isBase64) {
                        entity = decodeURIComponent(entity);
                        break;
                    }
                } // fallthrough
                case 'base64': {
                    var binaryStr = atob(entity);
                    var len = binaryStr.length;
                    var array = new Uint8Array(len);
                    for (var i = 0; i < len; i += 1) {
                        array[i] = binaryStr.charCodeAt(i);
                    }
                    type = 'blob';
                    entity = new Blob([array], { type: mimeType });
                    break;
                }
                case 'json': {
                    if (typeof entity !== 'string') {
                        entity = JSON.stringify(entity);
                    }
                    break;
                }
                case 'text':
                    break;
                default:
                    throw new Error("Supported request format:" + type);
            }
            message.entity(entity, type).mimeType(mimeType);
        }
    };
    return FetchConnector;
}(Connector_1.Connector));
exports.FetchConnector = FetchConnector;
Connector_1.Connector.connectors.push(FetchConnector);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmV0Y2hDb25uZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29ubmVjdG9yL0ZldGNoQ29ubmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5Q0FFcUI7QUFHckI7SUFBb0Msa0NBQVM7SUFBN0M7O0lBMkhBLENBQUM7SUExSEM7OztPQUdHO0lBQ0ksdUJBQVEsR0FBZjtRQUNFLE9BQU8sT0FBTyxLQUFLLEtBQUssV0FBVyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7T0FFRztJQUNILCtCQUFNLEdBQU4sVUFBTyxPQUFnQixFQUFFLE9BQWdCLEVBQUUsT0FBcUM7UUFDOUUsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDL0MsSUFBQSxNQUFNLEdBQUssT0FBTyxPQUFaLENBQWE7UUFDbkIsSUFBQSxPQUFPLEdBQUssT0FBTyxRQUFaLENBQWE7UUFDcEIsSUFBQSxNQUFNLEdBQUssT0FBTyxPQUFaLENBQWE7UUFDM0IsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFFeEUsT0FBTyxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ2hCLE1BQU0sUUFBQTtZQUNOLE9BQU8sU0FBQTtZQUNQLElBQUksRUFBRSxNQUFNO1lBQ1osV0FBVyxhQUFBO1NBQ1osQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLEdBQUc7WUFDVixJQUFNLGVBQWUsR0FBbUMsRUFBRSxDQUFDO1lBQzNELHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSTtnQkFDdEMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FB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