"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream = void 0;
var observable_1 = require("../util/observable");
var util_1 = require("../util");
var intersection_1 = require("../intersection");
var Stream = /** @class */ (function () {
    function Stream() {
    }
    /**
     * Creates a live updating object stream for a query
     *
     * @param entityManager The owning entity manager of this query
     * @param query The query options
     * @param query.query The serialized query
     * @param query.bucket The Bucket on which the streaming query is performed
     * @param query.sort the sort string
     * @param query.limit the count, i.e. the number of items in the result
     * @param query.offset offset, i.e. the number of items to skip
     * @param query.initial Indicates if the initial result should be returned
     * @param options an object containing parameters
     * @return The query result as a live updating stream of objects
     */
    Stream.createEventStream = function (entityManager, query, options) {
        var opt = options || {};
        opt.reconnects = 0;
        return Stream.streamObservable(entityManager, query, opt, function (msg, next) {
            var type = msg.type, eventProps = __rest(msg, ["type"]);
            if (msg.type === 'result') {
                msg.data.forEach(function (obj, index) {
                    var event = __assign(__assign(__assign({ matchType: 'add', operation: 'none', initial: true }, eventProps), { data: Stream.resolveObject(entityManager, obj) }), (query.sort && { index: index }));
                    next(event);
                });
            }
            if (msg.type === 'match') {
                next(__assign(__assign({ initial: false }, eventProps), { data: Stream.resolveObject(entityManager, msg.data) }));
            }
        });
    };
    /**
     * Creates a live updating result stream for a query
     *
     * @alias query.Stream.createStreamResult<T>
     * @param entityManager The owning entity manager of this query
     * @param query The query options
     * @param query.query The serialized query
     * @param query.bucket The Bucket on which the streaming query is performed
     * @param query.sort the sort string
     * @param query.limit the count, i.e. the number of items in the result
     * @param query.offset offset, i.e. the number of items to skip
     * @param options an object containing parameters
     * @return The query result as a live updating query result
     */
    Stream.createResultStream = function (entityManager, query, options) {
        var opt = options || {};
        opt.initial = true;
        opt.matchTypes = 'all';
        opt.operations = 'any';
        var result;
        var ordered = !!query.sort;
        return Stream.streamObservable(entityManager, query, opt, function (event, next) {
            if (event.type === 'result') {
                result = event.data.map(function (obj) { return Stream.resolveObject(entityManager, obj); });
                next(result.slice());
            }
            if (event.type === 'match') {
                var obj = Stream.resolveObject(entityManager, event.data);
                if (event.matchType === 'remove' || event.matchType === 'changeIndex') {
                    // if we have removed the instance our self, we do not have the cached instances anymore
                    // therefore we can't find it anymore in the result by identity
                    for (var i = 0, len = result.length; i < len; i += 1) {
                        if (result[i].id === event.data.id) {
                            result.splice(i, 1);
                            break;
                        }
                    }
                }
                if (event.matchType === 'add' || event.matchType === 'changeIndex') {
                    if (ordered) {
                        result.splice(event.index, 0, obj);
                    }
                    else {
                        result.push(obj);
                    }
                }
                next(result.slice());
            }
        });
    };
    Stream.streamObservable = function (entityManager, query, options, mapper) {
        var opt = Stream.parseOptions(options);
        var socket = entityManager.entityManagerFactory.websocket;
        var observable = new observable_1.Observable(function (subscriber) {
            var id = util_1.uuid();
            var stream = socket.openStream(entityManager.tokenStorage, id);
            stream.send(__assign(__assign({ type: 'subscribe' }, query), opt));
            var closed = false;
            var next = subscriber.next.bind(subscriber);
            var subscription = stream.subscribe({
                complete: function () {
                    closed = true;
                    subscriber.complete();
                },
                error: function (e) {
                    closed = true;
                    subscriber.error(e);
                },
                next: function (msg) {
                    mapper(msg, next);
                },
            });
            return function () {
                if (!closed) { // send unsubscribe only when we aren't completed by the socket and call it only once
                    stream.send({ type: 'unsubscribe' });
                    subscription.unsubscribe();
                    closed = true;
                }
            };
        });
        return Stream.cachedObservable(observable, opt);
    };
    Stream.cachedObservable = function (observable, options) {
        var subscription = null;
        var observers = [];
        return new observable_1.Observable(function (observer) {
            if (!subscription) {
                var remainingRetries_1 = options.reconnects;
                var backoff_1 = 1;
                var subscriptionObserver_1 = {
                    next: function (msg) {
                        // reset the backoff if we get a message
                        backoff_1 = 1;
                        observers.forEach(function (o) { return o.next(msg); });
                    },
                    error: function (e) {
                        observers.forEach(function (o) { return o.error(e); });
                    },
                    complete: function () {
                        if (remainingRetries_1 !== 0) {
                            remainingRetries_1 = remainingRetries_1 < 0 ? -1 : remainingRetries_1 - 1;
                            setTimeout(function () {
                                subscription = observable.subscribe(subscriptionObserver_1);
                            }, backoff_1 * 1000);
                            backoff_1 *= 2;
                        }
                        else {
                            observers.forEach(function (o) { return o.complete(); });
                        }
                    },
                };
                subscription = observable.subscribe(subscriptionObserver_1);
            }
            observers.push(observer);
            return function () {
                observers.splice(observers.indexOf(observer), 1);
                if (!observers.length && subscription) {
                    subscription.unsubscribe();
                    subscription = null;
                }
            };
        });
    };
    /**
     * Parses the StreamOptions
     *
     * @param [options] object containing partial options
     * @returns an object containing VALID options
     */
    Stream.parseOptions = function (options) {
        var opt = options || {};
        var verified = {
            initial: opt.initial === undefined || !!opt.initial,
            matchTypes: Stream.normalizeMatchTypes(opt.matchTypes),
            operations: Stream.normalizeOperations(opt.operations),
            reconnects: Stream.normalizeReconnects(opt.reconnects),
        };
        if (verified.matchTypes.indexOf('all') === -1 && verified.operations.indexOf('any') === -1) {
            throw new Error('Only subscriptions for either operations or matchTypes are allowed. You cannot subscribe to a query using matchTypes and operations at the same time!');
        }
        return verified;
    };
    Stream.normalizeMatchTypes = function (list) {
        return Stream.normalizeSortedSet(list, 'all', 'match types', ['add', 'change', 'changeIndex', 'match', 'remove']);
    };
    Stream.normalizeReconnects = function (reconnects) {
        if (reconnects === undefined) {
            return -1;
        }
        return reconnects < 0 ? -1 : Number(reconnects);
    };
    Stream.normalizeOperations = function (list) {
        return Stream.normalizeSortedSet(list, 'any', 'operations', ['delete', 'insert', 'none', 'update']);
    };
    Stream.normalizeSortedSet = function (list, wildcard, itemType, allowedItems) {
        if (!list) {
            return [wildcard];
        }
        var li = Array.isArray(list) ? list : [list];
        if (li.length === 0) { // undefined or empty list --> default value
            return [wildcard];
        }
        // sort, remove duplicates and check whether all values are allowed
        li.sort();
        var item;
        var lastItem = null;
        for (var i = li.length - 1; i >= 0; i -= 1) {
            item = li[i];
            if (!item) { // undefined and null item in the list --> invalid!
                throw new Error('undefined and null not allowed!');
            }
            if (item === lastItem) { // remove duplicates
                li.splice(i, 1);
            }
            if (item === wildcard) {
                return [wildcard];
            }
            if (allowedItems.indexOf(item) === -1) { // raise error on invalid elements
                throw new Error(item + " not allowed for " + itemType + "! (permitted: " + allowedItems + ".)");
            }
            lastItem = item;
        }
        return li;
    };
    Stream.resolveObject = function (entityManager, object) {
        var entity = entityManager.getReference(object.id);
        var metadata = intersection_1.Metadata.get(entity);
        if (!object.version) {
            metadata.setRemoved();
            entityManager.removeReference(entity);
        }
        else if (entity.version <= object.version) {
            metadata.type.fromJsonValue(metadata, object, entity, { persisting: true });
        }
        return entity;
    };
    return Stream;
}());
exports.Stream = Stream;
//# sourceMappingURL=data:application/json;base64,