"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Condition = void 0;
var Query_1 = require("./Query");
exports.Condition = {
    where: function (conditions) {
        return this.addFilter(null, null, conditions);
    },
    equal: function (field, value) {
        return this.addFilter(field, null, value);
    },
    notEqual: function (field, value) {
        return this.addFilter(field, '$ne', value);
    },
    greaterThan: function (field, value) {
        return this.addFilter(field, '$gt', value);
    },
    greaterThanOrEqualTo: function (field, value) {
        return this.addFilter(field, '$gte', value);
    },
    lessThan: function (field, value) {
        return this.addFilter(field, '$lt', value);
    },
    lessThanOrEqualTo: function (field, value) {
        return this.addFilter(field, '$lte', value);
    },
    between: function (field, greaterValue, lessValue) {
        return this
            .addFilter(field, '$gt', greaterValue)
            .addFilter(field, '$lt', lessValue);
    },
    in: function (field) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.addFilter(field, '$in', Query_1.flatArgs(args));
    },
    notIn: function (field) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.addFilter(field, '$nin', Query_1.flatArgs(args));
    },
    isNull: function (field) {
        return this.equal(field, null);
    },
    isNotNull: function (field) {
        return this.addFilter(field, '$exists', true)
            .addFilter(field, '$ne', null);
    },
    containsAll: function (field) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.addFilter(field, '$all', Query_1.flatArgs(args));
    },
    mod: function (field, divisor, remainder) {
        return this.addFilter(field, '$mod', [divisor, remainder]);
    },
    matches: function (field, regExp) {
        var reg = regExp instanceof RegExp ? regExp : new RegExp(regExp);
        if (reg.ignoreCase) {
            throw new Error('RegExp.ignoreCase flag is not supported.');
        }
        if (reg.global) {
            throw new Error('RegExp.global flag is not supported.');
        }
        if (reg.source.indexOf('^') !== 0) {
            throw new Error('regExp must be an anchored expression, i.e. it must be started with a ^.');
        }
        var result = this.addFilter(field, '$regex', reg.source);
        if (reg.multiline) {
            result.addFilter(field, '$options', 'm');
        }
        return result;
    },
    size: function (field, size) {
        return this.addFilter(field, '$size', size);
    },
    near: function (field, geoPoint, maxDistance) {
        return this.addFilter(field, '$nearSphere', {
            $geometry: {
                type: 'Point',
                coordinates: [geoPoint.longitude, geoPoint.latitude],
            },
            $maxDistance: maxDistance,
        });
    },
    withinPolygon: function (field) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var geoPoints = Query_1.flatArgs(args);
        return this.addFilter(field, '$geoWithin', {
            $geometry: {
                type: 'Polygon',
                coordinates: [geoPoints.map(function (geoPoint) { return [geoPoint.longitude, geoPoint.latitude]; })],
            },
        });
    },
};
// aliases
Object.assign(exports.Condition, {
    eq: exports.Condition.equal,
    ne: exports.Condition.notEqual,
    lt: exports.Condition.lessThan,
    le: exports.Condition.lessThanOrEqualTo,
    gt: exports.Condition.greaterThan,
    ge: exports.Condition.greaterThanOrEqualTo,
    containsAny: exports.Condition.in,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3F1ZXJ5L0NvbmRpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBbUM7QUE0VXRCLFFBQUEsU0FBUyxHQUE0QjtJQUNoRCxLQUFLLEVBQUwsVUFBNEIsVUFBVTtRQUNwQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsS0FBSyxFQUFMLFVBQTRCLEtBQUssRUFBRSxLQUFLO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxRQUFRLEVBQVIsVUFBK0IsS0FBSyxFQUFFLEtBQUs7UUFDekMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELFdBQVcsRUFBWCxVQUFrQyxLQUFLLEVBQUUsS0FBSztRQUM1QyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsb0JBQW9CLEVBQXBCLFVBQTJDLEtBQUssRUFBRSxLQUFLO1FBQ3JELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxRQUFRLEVBQVIsVUFBK0IsS0FBSyxFQUFFLEtBQUs7UUFDekMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELGlCQUFpQixFQUFqQixVQUF3QyxLQUFLLEVBQUUsS0FBSztRQUNsRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMs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