"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enhancer = void 0;
var BAQEND_ID = Symbol('BaqendId');
var BAQEND_TYPE = Symbol('BaqendType');
var Enhancer = /** @class */ (function () {
    function Enhancer() {
    }
    /**
     * @param superClass
     * @return typeConstructor
     */
    Enhancer.prototype.createProxy = function (superClass) {
        return /** @class */ (function (_super) {
            __extends(Proxy, _super);
            function Proxy() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return Proxy;
        }(superClass));
    };
    /**
     * @param typeConstructor
     * @returns type the managed type metadata for this class
     */
    Enhancer.getBaqendType = function (typeConstructor) {
        return typeConstructor[BAQEND_TYPE];
    };
    /**
     * @param typeConstructor
     * @return
     */
    Enhancer.getIdentifier = function (typeConstructor) {
        return typeConstructor[BAQEND_ID];
    };
    /**
     * @param typeConstructor
     * @param identifier
     */
    Enhancer.setIdentifier = function (typeConstructor, identifier) {
        typeConstructor[BAQEND_ID] = identifier;
    };
    /**
     * @param type
     * @param typeConstructor
     */
    Enhancer.prototype.enhance = function (type, typeConstructor) {
        if (typeConstructor[BAQEND_TYPE] === type) {
            return;
        }
        if (Object.prototype.hasOwnProperty.call(typeConstructor, BAQEND_TYPE)) {
            throw new Error('Type is already used by a different manager');
        }
        typeConstructor[BAQEND_TYPE] = type;
        Enhancer.setIdentifier(typeConstructor, type.ref);
        this.enhancePrototype(typeConstructor.prototype, type);
    };
    /**
     * Enhance the prototype of the type
     * @param proto
     * @param type
     */
    Enhancer.prototype.enhancePrototype = function (proto, type) {
        var _this = this;
        if (type.isEmbeddable) {
            return; // we do not need to enhance the prototype of embeddable
        }
        if (proto.toString === Object.prototype.toString) {
            // implements a better convenience toString method
            Object.defineProperty(proto, 'toString', {
                value: function toString() {
                    return this._metadata.id || this._metadata.bucket;
                },
                enumerable: false,
            });
        }
        // enhance all persistent object properties
        if (type.superType && type.superType.name === 'Object') {
            type.superType.declaredAttributes.forEach(function (attr) {
                if (!attr.isMetadata) {
                    _this.enhanceProperty(proto, attr);
                }
            });
        }
        // enhance all persistent properties
        type.declaredAttributes.forEach(function (attr) {
            _this.enhanceProperty(proto, attr);
        });
    };
    /**
     * @param proto
     * @param attribute
     */
    Enhancer.prototype.enhanceProperty = function (proto, attribute) {
        var name = attribute.name;
        Object.defineProperty(proto, name, {
            get: function () {
                this._metadata.throwUnloadedPropertyAccess(name);
                return null;
            },
            set: function (value) {
                this._metadata.throwUnloadedPropertyAccess(name);
                Object.defineProperty(this, name, {
                    value: value,
                    writable: true,
                    enumerable: true,
                    configurable: true,
                });
            },
            configurable: true,
            enumerable: true,
        });
    };
    return Enhancer;
}());
exports.Enhancer = Enhancer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5oYW5jZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYmluZGluZy9FbmhhbmNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBS0EsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUV6QztJQUFBO0lBK0dBLENBQUM7SUE5R0M7OztPQUdHO0lBQ0gsOEJBQVcsR0FBWCxVQUE0QixVQUFvQjtRQUM5QyxPQUFPO1lBQW9CLHlCQUFtQjtZQUF2Qzs7WUFBeUMsQ0FBQztZQUFELFlBQUM7UUFBRCxDQUFDLEFBQTFDLENBQXFCLFVBQWtCLEVBQWUsQ0FBQztJQUNoRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksc0JBQWEsR0FBcEIsVUFBcUIsZUFBc0M7UUFDekQsT0FBUSxlQUF1QixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7O09BR0c7SUFDSSxzQkFBYSxHQUFwQixVQUFxQixlQUFzQztRQUN6RCxPQUFRLGVBQXVCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVEOzs7T0FHRztJQUNJLHNCQUFhLEdBQXBCLFVBQXFCLGVBQTJCLEVBQUUsVUFBa0I7UUFDakUsZUFBdUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxVQUFVLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7T0FHRztJQUNILDBCQUFPLEdBQVAsVUFBMkIsSUFBb0IsRUFBRSxlQUF5QjtRQUN4RSxJQUFLLGVBQXVCLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ2xELE9BQU87U0FDUjtRQUVELElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsRUFBRTtZQUN0RSxNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFD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