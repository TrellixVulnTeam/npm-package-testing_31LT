import { EntityFactory } from './EntityFactory';
export var LoginOption;
(function (LoginOption) {
    /**
     * Do not login the user after a successful registration
     */
    LoginOption[LoginOption["NO_LOGIN"] = -1] = "NO_LOGIN";
    /**
     * Login in after a successful registration and keep the token in a nonpermanent storage, i.e SessionStorage
     */
    LoginOption[LoginOption["SESSION_LOGIN"] = 0] = "SESSION_LOGIN";
    /**
     * Login in after a successful registration and keep the token in a persistent storage, i.e LocalStorage
     */
    LoginOption[LoginOption["PERSIST_LOGIN"] = 1] = "PERSIST_LOGIN";
})(LoginOption || (LoginOption = {}));
/**
 * Creates a new instance of the managed type of this factory
 */
export class UserFactory extends EntityFactory {
    get LoginOption() {
        return LoginOption;
    }
    /**
     * The current logged in user, or <code>null</code> if the user is not logged in
     */
    get me() {
        return this.db.me;
    }
    /**
     * Register a new user with the given username and password, if the username is not used by an another user.
     * @param user The username as a string or a <User> Object, which must contain the username.
     * @param password The password for the given user
     * @param [loginOption=true] The default logs the user in after a successful
     * registration and keeps the user logged in over multiple sessions
     * @param doneCallback Called when the operation succeed.
     * @param failCallback Called when the operation failed.
     * @return The created user object, for the new registered user.
     */
    register(user, password, loginOption, doneCallback, failCallback) {
        if (loginOption instanceof Function) {
            return this.register(user, password, true, loginOption, doneCallback);
        }
        const userObj = typeof user === 'string' ? this.fromJSON({ username: user }) : user;
        return this.db.register(userObj, password, loginOption === undefined ? true : loginOption)
            .then(doneCallback, failCallback);
    }
    /**
     * Log in the user with the given username and password and starts a user session
     * @param username The username of the user
     * @param password The password of the user
     * @param [loginOption=true] The default keeps the user logged in over
     * multiple sessions
     * @param doneCallback Called when the operation succeed.
     * @param failCallback Called when the operation failed.
     * @return
     */
    login(username, password, loginOption, doneCallback, failCallback) {
        if (loginOption instanceof Function) {
            return this.login(username, password, true, loginOption, doneCallback);
        }
        return this.db.login(username, password, loginOption === undefined ? true : loginOption)
            .then(doneCallback, failCallback);
    }
    /**
     * Log in the user assiciated with the given token and starts a user session.
     * @param token The user token.
     * @param [loginOption=true] The default keeps the user logged in over
     * multiple sessions
     * @param doneCallback Called when the operation succeed.
     * @param failCallback Called when the operation failed.
     * @return
     */
    loginWithToken(token, loginOption, doneCallback, failCallback) {
        if (loginOption instanceof Function) {
            return this.loginWithToken(token, true, loginOption, doneCallback);
        }
        this.db.token = token;
        return this.db.renew(loginOption).then(doneCallback, failCallback);
    }
    /**
     * Log out the current logged in user and ends the active user session
     * @param doneCallback Called when the operation succeed.
     * @param failCallback Called when the operation failed.
     * @return
     */
    logout(doneCallback, failCallback) {
        return this.db.logout().then(doneCallback, failCallback);
    }
    newPassword(...args) {
        // detect signature newPassword(token, newPassword, [loginOption=true][, doneCallback[, failCallback]])
        if (typeof args[2] === 'string') {
            const [username, password, newPassword, doneCallback, failCallback] = args;
            return this.db.newPassword(username, password, newPassword).then(doneCallback, failCallback);
        }
        // eslint-disable-next-line prefer-const
        let [token, newPassword, loginOption, doneCallback, failCallback] = args;
        if (loginOption instanceof Function) {
            failCallback = doneCallback;
            doneCallback = loginOption;
            loginOption = true;
        }
        return this.db.newPasswordWithToken(token, newPassword, loginOption).then(doneCallback, failCallback);
    }
    /**
     * Sends an email with a link to reset the password for the given username
     *
     * The username must be a valid email address.
     *
     * @param username Username (email) to identify the user
     * @param doneCallback Called when the operation succeed.
     * @param failCallback Called when the operation failed.
     * @return
     */
    resetPassword(username, doneCallback, failCallback) {
        return this.db.resetPassword(username).then(doneCallback, failCallback);
    }
    /**
     * Sends an email with a link to change the current username
     *
     * The user is identified by their current username and password.
     * The username must be a valid email address.
     *
     * @param username Current username (email) to identify the user
     * @param newUsername New username (email) to change the current username to
     * @param password The current password of the user. Has to be passed to the function for security reason
     * @param doneCallback Called when the operation succeed.
     * @param failCallback Called when the operation failed.
     * @return
     */
    changeUsername(username, newUsername, password, doneCallback, failCallback) {
        return this.db.changeUsername(username, newUsername, password).then(doneCallback, failCallback);
    }
    /**
     * Requests a perpetual token for the given user
     *
     * Only users with the admin role are allowed to request an API token.
     *
     * @param user The user object or id of the user object
     * @param doneCallback Called when the operation succeed.
     * @param failCallback Called when the operation failed.
     * @return
     */
    requestAPIToken(user, doneCallback, failCallback) {
        return this.db.requestAPIToken(this.managedType.typeConstructor, user).then(doneCallback, failCallback);
    }
    /**
     * Revoke all created tokens for the given user
     *
     * This method will revoke all previously issued tokens and the user must login again.
     *
     * @param user The user object or id of the user object
     * @param doneCallback Called when the operation succeed.
     * @param failCallback Called when the operation failed.
     * @return
     */
    revokeAllTokens(user, doneCallback, failCallback) {
        return this.db.revokeAllTokens(this.managedType.typeConstructor, user).then(doneCallback, failCallback);
    }
}
/**
 * @property oauth default properties
 * @property google default oauth properties for Google
 * @property facebook default oauth properties for Facebook
 * @property github default oauth properties for GitHub
 * @property twitter default oauth properties for Twitter
 * @property linkedin default oauth properties for LinkedIn
 * @property {Object} oauth.salesforce default oauth properties for Salesforce
 */
UserFactory.DefaultOptions = {
    google: {
        width: 585,
        height: 545,
        scope: 'email',
    },
    facebook: {
        width: 1140,
        height: 640,
        scope: 'email',
    },
    github: {
        width: 1040,
        height: 580,
        scope: 'user:email',
    },
    twitter: {
        width: 740,
        height: 730,
    },
    linkedin: {
        width: 630,
        height: 530,
        scope: 'r_liteprofile',
    },
    salesforce: {
        width: 585,
        height: 545,
        scope: 'email',
    },
};
['Google', 'Facebook', 'GitHub', 'Twitter', 'LinkedIn', 'Salesforce'].forEach((name) => {
    const methodName = `loginWith${name}`;
    // do not use a lambda here since we will loose the this context
    UserFactory.prototype[methodName] = function loginWithOAuth(clientID, options, doneCallback, failCallback) {
        if (options instanceof Function) {
            return this[methodName](clientID, {}, options, doneCallback);
        }
        const opt = Object.assign(Object.assign({}, UserFactory.DefaultOptions[name.toLowerCase()]), options || {});
        return this.db.loginWithOAuth(name, clientID, opt).then(doneCallback, failCallback);
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlckZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYmluZGluZy9Vc2VyRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHaEQsTUFBTSxDQUFOLElBQVksV0FhWDtBQWJELFdBQVksV0FBVztJQUNyQjs7T0FFRztJQUNILHNEQUFhLENBQUE7SUFDYjs7T0FFRztJQUNILCtEQUFpQixDQUFBO0lBQ2pCOztPQUVHO0lBQ0gsK0RBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQWJXLFdBQVcsS0FBWCxXQUFXLFFBYXRCO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sV0FBWSxTQUFRLGFBQXlCO0lBQ3hELElBQVcsV0FBVztRQUNwQixPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBMkNEOztPQUVHO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsUUFBUSxDQUFDLElBQXlCLEVBQUUsUUFBZ0IsRUFBRSxXQUE4QyxFQUNsRyxZQUFrQixFQUFFLFlBQWtCO1FBQ3RDLElBQUksV0FBVyxZQUFZLFFBQVEsRUFBRTtZQUNuQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3ZFO1FBRUQsTUFBTSxPQUFPLEdBQUcsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNwRixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FB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