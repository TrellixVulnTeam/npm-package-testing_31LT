import { Factory } from './Factory';
import { Metadata } from '../intersection';
export class ManagedFactory extends Factory {
    constructor() {
        super(...arguments);
        /**
         * Methods that are added to object instances
         * This property is an alias for this factory type prototype
         * @name methods
         */
        this.methods = null;
        /**
         * The managed type of this factory
         */
        this.managedType = null;
        /**
         * The owning EntityManager where this factory belongs to
         */
        this.db = null;
    }
    /**
     * Creates a new ManagedFactory for the given type
     * @param managedType The metadata of type T
     * @param db The entity manager instance
     */
    static create(managedType, db) {
        const factory = this.createFactory(managedType.typeConstructor);
        factory.methods = factory.prototype;
        factory.managedType = managedType;
        factory.db = db;
        return factory;
    }
    /**
     * Creates a new instance and sets the Managed Object to the given json
     * @param json
     * @return A new created instance of T
     */
    fromJSON(json) {
        const instance = this.newInstance();
        return this.managedType.fromJsonValue(Metadata.create(this.managedType, this.db), json, instance, {
            persisting: false,
        });
    }
    /**
     * Adds methods to instances of this factories type
     * @param methods The methods to add
     * @return
     */
    addMethods(methods) {
        Object.assign(this.methods, methods);
    }
    /**
     * Add a method to instances of this factories type
     * @param name The method name to add
     * @param fn The Method to add
     * @return
     */
    addMethod(name, fn) {
        this.methods[name] = fn;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFuYWdlZEZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYmluZGluZy9NYW5hZ2VkRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBS3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxNQUFNLE9BQU8sY0FBa0MsU0FBUSxPQUFVO0lBQWpFOztRQWdCRTs7OztXQUlHO1FBQ0ksWUFBTyxHQUFnQyxJQUFXLENBQUM7UUFFMUQ7O1dBRUc7UUFDSSxnQkFBVyxHQUFtQixJQUFXLENBQUM7UUFFakQ7O1dBRUc7UUFDSSxPQUFFLEdBQWtCLElBQVcsQ0FBQztJQWdDekMsQ0FBQztJQTlEQzs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBb0IsV0FBMkIsRUFBRSxFQUFpQjtRQUNwRixNQUFNLE9BQU8sR0FBc0IsSUFBSSxDQUFDLGFBQWEsQ0FBdUIsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXpHLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNwQyxPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUNsQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUVoQixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBbUJEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsSUFBVTtRQUNqQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7WUFDaEcsVUFBVSxFQUFFLEtBQUs7U0FDbEIsQ0FBRSxDQUFDO0lBQ04sQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsT0FBbUM7UUFDNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFNBQVMsQ0FBQyxJQUFZLEVBQUUsRUFBWTtRQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQ0YifQ==