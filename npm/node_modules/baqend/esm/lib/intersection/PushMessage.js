import { Entity } from '../binding';
/**
 * PushMessages are used to send a push notification to a set of devices
 */
export class PushMessage {
    /**
     * Push message will be used to send a push notification to a set of devices
     *
     * @param [devices] The Set of device references which
     * will receive this push notification.
     * @param message The message of the push notification.
     * @param subject The subject of the push notification.
     * @param [options] The options object which can contain additional information and data
     * @param [badge] The badge for iOS or Web Push devices
     * @param [data] The data object which can contain additional information.
     */
    constructor(devices, message, subject, options, badge, data) {
        const opts = typeof options === 'string' ? { sound: options, badge, data } : (options || {});
        this.devices = PushMessage.initDevices(devices);
        this.message = message;
        this.subject = subject;
        Object.assign(this, opts);
    }
    /**
     * Instantiates a set of devices from the given parameter
     * @param devices
     * @return
     */
    static initDevices(devices) {
        if (devices instanceof Set) {
            return devices;
        }
        if (devices instanceof Entity) {
            return new Set([devices]);
        }
        if (!devices || devices[Symbol.iterator]) {
            return new Set(devices);
        }
        throw new Error('Only Sets, Lists and Arrays can be used as devices.');
    }
    /**
     * Adds a new object to the set of devices
     * @param device will be added to the device set to receive the push notification
     * @return
     */
    addDevice(device) {
        this.devices.add(device);
    }
    /**
     * Converts the push message to JSON
     * @return
     */
    toJSON() {
        if (!this.devices || !this.devices.size) {
            throw new Error('Set of devices is empty.');
        }
        return Object.assign({}, this, {
            devices: Array.from(this.devices, (device) => device.id),
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHVzaE1lc3NhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvaW50ZXJzZWN0aW9uL1B1c2hNZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxZQUFZLENBQUM7QUF3RXBDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFdBQVc7SUFnQnRCOzs7Ozs7Ozs7O09BVUc7SUFDSCxZQUFZLE9BQThELEVBQUUsT0FBZ0IsRUFBRSxPQUFnQixFQUM1RyxPQUFxQyxFQUFFLEtBQXFCLEVBQUUsSUFBVztRQUN6RSxNQUFNLElBQUksR0FBRyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTdGLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUV2QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBK0Q7UUFDeEYsSUFBSSxPQUFPLFlBQVksR0FBRyxFQUFFO1lBQzFCLE9BQU8sT0FBTyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxPQUFPLFlBQVksTUFBTSxFQUFFO1lBQzdCLE9BQU8sSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQzNCO1FBRUQsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3hDLE9BQU8sSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDekI7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxTQUFTLENBQUMsTUFBb0I7UUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU07UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztTQUM3QztRQUVELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFhLEVBQUUsSUFBSSxFQUFFO1lBQ3hDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7U0FDekQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIn0=