import { Acl } from '../Acl';
import { Lockable } from '../util';
import { PersistentError } from '../error';
export var MetadataState;
(function (MetadataState) {
    MetadataState[MetadataState["UNAVAILABLE"] = -1] = "UNAVAILABLE";
    MetadataState[MetadataState["PERSISTENT"] = 0] = "PERSISTENT";
    MetadataState[MetadataState["DIRTY"] = 1] = "DIRTY";
})(MetadataState || (MetadataState = {}));
/**
 * The Metadata instance tracks the state of an object and checks if the object state was changed since last
 * load/update. The metadata keeps therefore the state of:
 * - in which state the object currently is
 * - which db managed the instance
 * - the metadata of the object (id, version, bucket)
 * - which is the owning object (root object) of an embedded object
 *
 * {@link Metadata#get(object)} can be used on any managed object to retrieve the metadata of the root object
 */
export class Metadata extends Lockable {
    /**
     * @param type
     */
    constructor(type) {
        super();
        this.entityManager = null;
        this.decodedKey = null;
        this.id = null;
        this.state = MetadataState.DIRTY;
        this.enabled = true;
        this.id = null;
        this.version = null;
        this.type = type;
        this.acl = new Acl();
    }
    static create(type, db) {
        if (type.isEntity) {
            return new Metadata(type);
        }
        if (type.isEmbeddable) {
            return { type, db, setDirty() { } };
        }
        throw new Error(`Illegal type ${type}`);
    }
    /**
     * Returns the metadata of the managed object
     * @param managed
     * @return
     */
    static get(managed) {
        // eslint-disable-next-line no-underscore-dangle
        return managed._metadata;
    }
    /**
     * @type EntityManager
     */
    get db() {
        if (this.entityManager) {
            return this.entityManager;
        }
        this.entityManager = require('../baqend').db; // eslint-disable-line global-require
        return this.entityManager;
    }
    /**
     * @param db
     */
    set db(db) {
        if (!this.entityManager) {
            this.entityManager = db;
        }
        else {
            throw new Error('DB has already been set.');
        }
    }
    /**
     * @type string
     * @readonly
     */
    get bucket() {
        return this.type.name;
    }
    /**
     * @type string
     * @readonly
     */
    get key() {
        if (!this.decodedKey && this.id) {
            const index = this.id.lastIndexOf('/');
            this.decodedKey = decodeURIComponent(this.id.substring(index + 1));
        }
        return this.decodedKey;
    }
    /**
     * @param value
     */
    set key(value) {
        const val = `${value}`;
        if (this.id) {
            throw new Error('The id can\'t be set twice.');
        }
        this.id = `/db/${this.bucket}/${encodeURIComponent(val)}`;
        this.decodedKey = val;
    }
    /**
     * Indicates if this object already belongs to an db
     * <code>true</code> if this object belongs already to an db otherwise <code>false</code>
     * @type boolean
     * @readonly
     */
    get isAttached() {
        return !!this.entityManager;
    }
    /**
     * Indicates if this object is represents a db object, but was not loaded up to now
     * @type boolean
     * @readonly
     */
    get isAvailable() {
        return this.state > MetadataState.UNAVAILABLE;
    }
    /**
     * Indicates if this object represents the state of the db and was not modified in any manner
     * @type boolean
     * @readonly
     */
    get isPersistent() {
        return this.state === MetadataState.PERSISTENT;
    }
    /**
     * Indicates that this object was modified and the object was not written back to the db
     * @type boolean
     * @readonly
     */
    get isDirty() {
        return this.state === MetadataState.DIRTY;
    }
    /**
     * Enable/Disable state change tracking of this object
     * @param newStateTrackingState The new change tracking state
     * @return
     */
    enable(newStateTrackingState) {
        this.enabled = newStateTrackingState;
    }
    /**
     * Throws the corresponding error if a property is accessed before the owning object is loaded
     * @throws an exception if the object properties aren't available and the object is enabled
     */
    throwUnloadedPropertyAccess(property) {
        if (this.enabled && !this.isAvailable) {
            throw new PersistentError(`Illegal property access on ${this.id}#${property} , ensure that this reference is loaded before it's properties are accessed.`);
        }
    }
    /**
     * Indicates that the associated object isn't available
     * @return
     */
    setUnavailable() {
        this.state = MetadataState.UNAVAILABLE;
    }
    /**
     * Indicates that the associated object is not stale
     *
     * An object is stale if it correlates the database state and is not modified by the user.
     *
     * @return
     */
    setPersistent() {
        this.state = MetadataState.PERSISTENT;
    }
    /**
     * Indicates the the object is modified by the user
     * @return
     */
    setDirty() {
        this.state = MetadataState.DIRTY;
    }
    /**
     * Indicates the the object is removed
     * @return
     */
    setRemoved() {
        // mark the object only as dirty if it was already available
        if (this.isAvailable) {
            this.setDirty();
            this.version = null;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvaW50ZXJzZWN0aW9uL01ldGFkYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDN0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUduQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBYzNDLE1BQU0sQ0FBTixJQUFZLGFBSVg7QUFKRCxXQUFZLGFBQWE7SUFDdkIsZ0VBQWdCLENBQUE7SUFDaEIsNkRBQWMsQ0FBQTtJQUNkLG1EQUFTLENBQUE7QUFDWCxDQUFDLEVBSlcsYUFBYSxLQUFiLGFBQWEsUUFJeEI7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLE9BQU8sUUFBUyxTQUFRLFFBQVE7SUFzSnBDOztPQUVHO0lBQ0gsWUFBWSxJQUFxQjtRQUMvQixLQUFLLEVBQUUsQ0FBQztRQXpKVixrQkFBYSxHQUF5QixJQUFJLENBQUM7UUFJM0MsZUFBVSxHQUFrQixJQUFJLENBQUM7UUFFakMsT0FBRSxHQUFrQixJQUFJLENBQUM7UUFxSnZCLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBL0hELE1BQU0sQ0FBQyxNQUFNLENBQW1CLElBQW9CLEVBQUUsRUFBa0I7UUFDdEUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBcUIsQ0FBQyxDQUFDO1NBQzVDO1FBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3ZCLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFFBQVEsS0FBSSxDQUFDLEVBQUUsQ0FBQztTQUNwQztRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLElBQUksRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQWU7UUFDeEIsZ0RBQWdEO1FBQ2hELE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLEVBQUU7UUFDSixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQzNCO1FBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUNBQXFDO1FBRW5GLE9BQU8sSUFBSSxDQUFDLGFBQWMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLEVBQUUsQ0FBQyxFQUFpQjtRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztTQUN6QjthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksR0FBRztRQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDL0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRTtRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLEdBQUcsQ0FBQyxLQUFvQjtRQUMxQixNQUFNLEdBQUcsR0FBRyxHQUFHLEtBQUssRUFBRSxDQUFDO1FBRXZCLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztTQUNoRDtRQUVELElBQUksQ0FBQyxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDMUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBSSxVQUFVO1FBQ1osT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxVQUFVLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLEtBQUssQ0FBQztJQUM1QyxDQUFDO0lBZ0JEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMscUJBQThCO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7T0FHRztJQUNILDJCQUEyQixDQUFDLFFBQWdCO1FBQzFDLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckMsTUFBTSxJQUFJLGVBQWUsQ0FBQyw4QkFBOEIsSUFBSSxDQUFDLEVBQUUsSUFBSSxRQUFRLDhFQUE4RSxDQUFDLENBQUM7U0FDNUo7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsY0FBYztRQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsYUFBYTtRQUNYLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUNuQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsVUFBVTtRQUNSLDREQUE0RDtRQUM1RCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQztDQUNGIn0=