import * as msg from '../message';
/**
 * A Logger to store log notes when running the app.
 */
export class Logger {
    constructor() {
        this.entityManager = null;
        this.levelIndex = 2;
    }
    /**
     * Creates a Logger instance for the given EntityManager
     * @param entityManager - Theo owning entityManager
     * @return The created logger instance
     */
    static create(entityManager) {
        const proto = this.prototype;
        const logger = (() => {
            function LoggerFunction(...args) {
                proto.log.apply(LoggerFunction, args);
            }
            Object.getOwnPropertyNames(proto).forEach((key) => {
                Object.defineProperty(LoggerFunction, key, Object.getOwnPropertyDescriptor(proto, key));
            });
            return LoggerFunction;
        })();
        logger.init(entityManager);
        return logger;
    }
    /**
     * The log level which will be logged
     *
     * The log level can be one of 'trace', 'debug', 'info', 'warn', 'error'
     * @type string
     */
    get level() {
        return Logger.LEVELS[this.levelIndex];
    }
    /**
     * Sets the log level which will be logged
     * @param value
     */
    set level(value) {
        const index = Logger.LEVELS.indexOf(value);
        if (index === -1) {
            throw new Error(`Unknown logging level ${value}`);
        }
        this.levelIndex = index;
    }
    log(...args) {
        const level = Logger.LEVELS.indexOf(args[0]) === -1 ? 'info' : args.shift();
        if (this.levelIndex > Logger.LEVELS.indexOf(level)) {
            return Promise.resolve(null);
        }
        let message = typeof args[0] === 'string' ? this.format(args.shift(), args) : '[no message]';
        let data = null;
        if (args.length) {
            const arg = args.pop();
            data = arg;
            if (typeof arg !== 'object' || Array.isArray(arg)) {
                data = { data: arg };
            }
            if (arg instanceof Error) {
                // errors aren't loggable by default, since they do not have any visible property
                const { 
                // @ts-ignore
                stack, data: data1, message: message1, name, status, } = arg;
                data = {
                    name,
                    message: message1,
                    stack,
                    status,
                    data: data1,
                };
            }
        }
        if (args.length) {
            message += `, ${args.join(', ')}`;
        }
        return this.logJSON(Object.assign({ date: new Date().toISOString(), message,
            level,
            data }, (this.entityManager.me && { user: this.entityManager.me.id })));
    }
    format(message, args) {
        if (args.length === 0) {
            return message;
        }
        const str = String(message).replace(Logger.FORMAT_REGEXP, (x) => {
            if (x === '%%') {
                return '%';
            }
            if (!args.length) {
                return x;
            }
            switch (x) {
                case '%s':
                    return String(args.shift());
                case '%d':
                    return String(Number(args.shift()));
                case '%j':
                    try {
                        return JSON.stringify(args.shift());
                    }
                    catch (_) {
                        return '[Circular]';
                    }
                default:
                    return x;
            }
        });
        return str;
    }
    init(entityManager) {
        this.entityManager = entityManager;
        this.levelIndex = 2;
        Logger.LEVELS.forEach((level) => {
            this[level] = this.log.bind(this, level);
        });
    }
    logJSON(json) {
        if (!this.entityManager.isReady) {
            return this.entityManager.ready(this.logJSON.bind(this, json));
        }
        return this.entityManager.send(new msg.CreateObject('logs.AppLog', json));
    }
}
Logger.LEVELS = ['trace', 'debug', 'info', 'warn', 'error'];
Logger.FORMAT_REGEXP = /%[sdj%]/g;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2ludGVyc2VjdGlvbi9Mb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxZQUFZLENBQUM7QUFNbEM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sTUFBTTtJQUFuQjtRQUtTLGtCQUFhLEdBQWtCLElBQVcsQ0FBQztRQUUzQyxlQUFVLEdBQVcsQ0FBQyxDQUFDO0lBa01oQyxDQUFDO0lBaE1DOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQTRCO1FBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFN0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDbkIsU0FBUyxjQUFjLENBQUMsR0FBRyxJQUFXO2dCQUNwQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsSUFBVyxDQUFDLENBQUM7WUFDL0MsQ0FBQztZQUVELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDaEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFFLENBQUMsQ0FBQztZQUMzRixDQUFDLENBQUMsQ0FBQztZQUVILE9BQU8sY0FBK0IsQ0FBQztRQUN6QyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRUwsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUUzQixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxJQUFJLEtBQUs7UUFDUCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7O09B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