import { CommunicationError } from '../error';
import { WebSocket } from '../util/websocket';
import { Observable } from '../util/observable';
export class WebSocketConnector {
    /**
     *url
     */
    constructor(url) {
        this.observers = {};
        this.socket = null;
        this.url = url;
    }
    /**
     *url The websocket connect script url
     *a websocket connection
     */
    static create(url) {
        let websocket = this.websockets[url];
        if (!websocket) {
            websocket = new WebSocketConnector(url);
            this.websockets[url] = websocket;
        }
        return websocket;
    }
    open() {
        if (!this.socket) {
            const socket = new WebSocket(this.url);
            let socketPromise;
            const handleSocketCompletion = (error) => {
                // observable error calls can throw an exception therefore cleanup beforehand
                let isError = false;
                if (this.socket === socketPromise) {
                    isError = socket.readyState !== 3;
                    this.socket = null;
                }
                let firstErr = null;
                Object.keys(this.observers).forEach((id) => {
                    const observer = this.observers[id];
                    delete this.observers[id]; // unsubscribe to allow re subscriptions
                    if (!observer) {
                        return;
                    }
                    try {
                        if (isError) {
                            observer.error(new CommunicationError(null, Object.assign({ status: 0, headers: {} }, (error instanceof Error && { error }))));
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        if (!firstErr) {
                            firstErr = e;
                        }
                    }
                });
                if (firstErr) {
                    throw firstErr;
                }
            };
            socket.onerror = handleSocketCompletion;
            socket.onclose = handleSocketCompletion;
            socket.onmessage = (event) => {
                const message = JSON.parse(event.data);
                message.date = new Date(message.date);
                const { id } = message;
                if (!id) {
                    if (message.type === 'error') {
                        handleSocketCompletion(message);
                    }
                    return;
                }
                const observer = this.observers[id];
                if (observer) {
                    if (message.type === 'error') {
                        observer.error(new CommunicationError(null, message));
                    }
                    else {
                        observer.next(message);
                    }
                }
            };
            socketPromise = new Promise((resolve) => {
                socket.onopen = resolve;
            }).then(() => socket);
            this.socket = socketPromise;
        }
        return this.socket;
    }
    close() {
        if (this.socket) {
            this.socket.then((socket) => {
                socket.close();
            });
            this.socket = null;
        }
    }
    /**
     *tokenStorage
     *id subscription ID
     *The channel for sending and receiving messages
     */
    openStream(tokenStorage, id) {
        const stream = new Observable((observer) => {
            if (this.observers[id]) {
                throw new Error('Only one subscription per stream is allowed.');
            }
            this.observers[id] = observer;
            return () => {
                // cleanup only our subscription and handle re subscription on the same stream id correctly
                if (this.observers[id] === observer) {
                    delete this.observers[id];
                }
            };
        });
        Object.assign(stream, {
            send: (message) => {
                this.open().then((socket) => {
                    const jsonMessage = JSON.stringify(Object.assign(Object.assign({ id }, message), (tokenStorage.token && { token: tokenStorage.token })));
                    socket.send(jsonMessage);
                });
            },
        });
        return stream;
    }
}
/**
 * Map of all available connectors to their respective websocket connections
 */
WebSocketConnector.websockets = {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViU29ja2V0Q29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2Nvbm5lY3Rvci9XZWJTb2NrZXRDb25uZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sb0JBQW9CLENBQUM7QUE2QjVELE1BQU0sT0FBTyxrQkFBa0I7SUF5QjdCOztPQUVHO0lBQ0gsWUFBWSxHQUFXO1FBdEJmLGNBQVMsR0FBeUQsRUFBRSxDQUFDO1FBRXJFLFdBQU0sR0FBOEIsSUFBSSxDQUFDO1FBcUIvQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDO0lBbEJEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBVztRQUN2QixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxTQUFTLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQztTQUNsQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFTRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksYUFBaUMsQ0FBQztZQUV0QyxNQUFNLHNCQUFzQixHQUFHLENBQUMsS0FBa0IsRUFBRSxFQUFFO2dCQUNwRCw2RUFBNkU7Z0JBQzdFLElBQUksT0FBTyxHQUFHLEtBQUssQ0FB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