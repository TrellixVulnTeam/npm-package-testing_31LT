/* eslint-disable no-restricted-globals */
import { PersistentError } from '../error';
export class Connector {
    /**
     * @param host - the host to connect to
     * @param port - the port to connect to
     * @param secure - <code>true</code> for an secure connection
     * @param basePath - The base path of the api endpoint
     */
    constructor(host, port, secure, basePath) {
        this.host = host;
        this.port = port;
        this.secure = secure;
        this.basePath = basePath;
        /**
         * the origin do not contains the base path
         */
        this.origin = Connector.toUri(this.host, this.port, this.secure, '');
        /**
         * The connector will detect if gzip is supported.
         * Returns true if supported otherwise false.
         */
        this.gzip = false;
    }
    /**
     * Indicates id this connector is usable in the current runtime environment
     * This method must be overwritten in subclass implementations
     * @param host - the host to connect to
     * @param port - the port to connect to
     * @param secure - <code>true</code> for an secure connection
     * @param basePath - The base path of the api endpoint
     * @return <code>true</code> if this connector is usable in the current environment
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    static isUsable(host, port, secure, basePath) {
        return false;
    }
    /**
     * @param host or location
     * @param port
     * @param secure=true <code>true</code> for an secure connection
     * @param basePath The basepath of the api
     * @return
     */
    static create(host, port, secure, basePath) {
        let h = host;
        let p = port;
        let s = secure;
        let b = basePath;
        if (typeof location !== 'undefined') {
            if (!h) {
                h = location.hostname;
                p = Number(location.port);
            }
            if (s === undefined) {
                s = location.protocol === 'https:';
            }
        }
        // ensure right type, make secure: true the default
        s = s === undefined || !!s;
        if (b === undefined) {
            b = Connector.DEFAULT_BASE_PATH;
        }
        if (h.indexOf('/') !== -1) {
            const matches = /^(https?):\/\/([^/:]+|\[[^\]]+])(:(\d*))?(\/\w+)?\/?$/.exec(h);
            if (matches) {
                s = matches[1] === 'https';
                h = matches[2].replace(/(\[|])/g, '');
                p = Number(matches[4]);
                b = matches[5] || '';
            }
            else {
                throw new Error(`The connection uri host ${h} seems not to be valid`);
            }
        }
        else if (h !== 'localhost' && /^[a-z0-9-]*$/.test(h)) {
            // handle app names as hostname
            h += Connector.HTTP_DOMAIN;
        }
        if (!p) {
            p = s ? 443 : 80;
        }
        const url = Connector.toUri(h, p, s, b);
        let connection = this.connections[url];
        if (!connection) {
            // check last registered connector first to simplify registering connectors
            for (let i = this.connectors.length - 1; i >= 0; i -= 1) {
                const ConnectorConstructor = this.connectors[i];
                if (ConnectorConstructor.isUsable && ConnectorConstructor.isUsable(h, p, s, b)) {
                    connection = new ConnectorConstructor(h, p, s, b);
                    break;
                }
            }
            if (!connection) {
                throw new Error('No connector is usable for the requested connection.');
            }
            this.connections[url] = connection;
        }
        return connection;
    }
    static toUri(host, port, secure, basePath) {
        let uri = (secure ? 'https://' : 'http://') + (host.indexOf(':') !== -1 ? `[${host}]` : host);
        uri += ((secure && port !== 443) || (!secure && port !== 80)) ? `:${port}` : '';
        uri += basePath;
        return uri;
    }
    /**
     * @param message
     * @return
     */
    send(message) {
        let response = { status: 0, headers: {} };
        return Promise.resolve()
            .then(() => this.prepareRequest(message))
            .then(() => new Promise((resolve) => {
            this.doSend(message, message.request, resolve);
        }))
            .then((res) => { response = res; })
            .then(() => this.prepareResponse(message, response))
            .then(() => {
            message.doReceive(response);
            return response;
        })
            .catch((e) => {
            response.entity = null;
            throw PersistentError.of(e);
        });
    }
    /**
     * @param message
     * @return
     */
    prepareRequest(message) {
        const mimeType = message.mimeType();
        if (!mimeType) {
            const { type } = message.request;
            if (type === 'json') {
                message.mimeType('application/json;charset=utf-8');
            }
            else if (type === 'text') {
                message.mimeType('text/plain;charset=utf-8');
            }
        }
        this.toFormat(message);
        let accept;
        switch (message.responseType()) {
            case 'json':
                accept = 'application/json';
                break;
            case 'text':
                accept = 'text/*';
                break;
            default:
                accept = 'application/json,text/*;q=0.5,*/*;q=0.1';
        }
        if (!message.accept()) {
            message.accept(accept);
        }
        if (this.gzip) {
            const ifNoneMatch = message.ifNoneMatch();
            if (ifNoneMatch && ifNoneMatch !== '""' && ifNoneMatch !== '*') {
                message.ifNoneMatch(`${ifNoneMatch.slice(0, -1)}--gzip"`);
            }
        }
        const tokenStorage = message.tokenStorage();
        if (message.request.path === '/connect') {
            return tokenStorage.signPath(this.basePath + message.request.path)
                .then((signedPath) => {
                // eslint-disable-next-line no-param-reassign
                message.request.path = signedPath.substring(this.basePath.length);
                if (message.cacheControl()) {
                    // eslint-disable-next-line no-param-reassign
                    message.request.path += `${message.request.path.indexOf('?') !== -1 ? '&' : '?'}BCB`;
                }
                return message;
            });
        }
        if (tokenStorage) {
            const { token } = tokenStorage;
            if (token) {
                message.header('authorization', `BAT ${token}`);
            }
        }
        return message;
    }
    /**
     * @param message
     * @param response The received response headers and data
     * @return
     */
    prepareResponse(message, response) {
        // IE9 returns status code 1223 instead of 204
        response.status = response.status === 1223 ? 204 : response.status;
        let type;
        const headers = response.headers || {};
        // some proxies send content back on 204 responses
        const entity = response.status === 204 ? null : response.entity;
        if (entity) {
            type = message.responseType();
            if (!type || response.status >= 400) {
                const contentType = headers['content-type'] || headers['Content-Type'];
                if (contentType && contentType.indexOf('application/json') > -1) {
                    type = 'json';
                }
            }
        }
        if (headers.etag) {
            headers.etag = headers.etag.replace('--gzip', '');
        }
        const tokenStorage = message.tokenStorage();
        if (tokenStorage) {
            const token = headers['baqend-authorization-token'] || headers['Baqend-Authorization-Token'];
            if (token) {
                tokenStorage.update(token);
            }
        }
        return new Promise((resolve) => {
            resolve(entity && this.fromFormat(response, entity, type));
        }).then((resultEntity) => {
            response.entity = resultEntity;
            if (message.request.path.indexOf('/connect') !== -1 && resultEntity) {
                this.gzip = !!resultEntity.gzip;
            }
        }, (e) => {
            throw new Error(`Response was not valid ${type}: ${e.message}`);
        });
    }
}
Connector.DEFAULT_BASE_PATH = '/v1';
Connector.HTTP_DOMAIN = '.app.baqend.com';
/**
 * An array of all exposed response headers
 */
Connector.RESPONSE_HEADERS = [
    'baqend-authorization-token',
    'content-type',
    'baqend-size',
    'baqend-acl',
    'etag',
    'last-modified',
    'baqend-created-at',
    'baqend-custom-headers',
];
/**
 * Array of all available connector implementations
 */
Connector.connectors = [];
/**
 * Array of all created connections
 */
Connector.connections = {};
//# sourceMappingURL=data:application/json;base64,