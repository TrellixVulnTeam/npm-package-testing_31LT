import { Filter } from './Filter';
import { Condition } from './Condition';
import { Operator } from './Operator';
import { Query, flatArgs, } from './Query';
import { Node } from './Node';
export class Builder extends Query {
    /**
     * Joins the conditions by an logical AND
     * @param args The query nodes to join
     * @return Returns a new query which joins the given queries by a logical AND
     */
    and(...args) {
        return this.addOperator('$and', flatArgs(args));
    }
    /**
     * Joins the conditions by an logical OR
     * @param args The query nodes to join
     * @return Returns a new query which joins the given queries by a logical OR
     */
    or(...args) {
        return this.addOperator('$or', flatArgs(args));
    }
    /**
     * Joins the conditions by an logical NOR
     * @param args The query nodes to join
     * @return Returns a new query which joins the given queries by a logical NOR
     */
    nor(...args) {
        return this.addOperator('$nor', flatArgs(args));
    }
    eventStream(options, onNext, onError, onComplete) {
        return this.where({}).eventStream(options, onNext, onError, onComplete);
    }
    resultStream(options, onNext, onError, onComplete) {
        return this.where({}).resultStream(options, onNext, onError, onComplete);
    }
    /**
     * @inheritDoc
     */
    resultList(options, doneCallback, failCallback) {
        return this.where({}).resultList(options, doneCallback, failCallback);
    }
    /**
     * @inheritDoc
     */
    singleResult(options, doneCallback, failCallback) {
        return this.where({}).singleResult(options, doneCallback, failCallback);
    }
    /**
     * @inheritDoc
     */
    count(doneCallback, failCallback) {
        return this.where({}).count(doneCallback, failCallback);
    }
    addOperator(operator, args) {
        if (args.length < 2) {
            throw new Error(`Only two or more queries can be joined with an ${operator} operator.`);
        }
        args.forEach((arg, index) => {
            if (!(arg instanceof Node)) {
                throw new Error(`Argument at index ${index} is not a query.`);
            }
        });
        return new Operator(this.entityManager, this.resultClass, operator, args);
    }
    addOrder(fieldOrSort, order) {
        return new Filter(this.entityManager, this.resultClass).addOrder(fieldOrSort, order);
    }
    addFilter(field, filter, value) {
        return new Filter(this.entityManager, this.resultClass).addFilter(field, filter, value);
    }
    addOffset(offset) {
        return new Filter(this.entityManager, this.resultClass).addOffset(offset);
    }
    addLimit(limit) {
        return new Filter(this.entityManager, this.resultClass).addLimit(limit);
    }
}
Object.assign(Builder.prototype, Condition);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9xdWVyeS9CdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFLTCxLQUFLLEVBRXdGLFFBQVEsR0FDdEcsTUFBTSxTQUFTLENBQUM7QUFFakIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQU85QixNQUFNLE9BQU8sT0FBMEIsU0FBUSxLQUFRO0lBQ3JEOzs7O09BSUc7SUFDSCxHQUFHLENBQUMsR0FBRyxJQUFrQztRQUN2QyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsRUFBRSxDQUFDLEdBQUcsSUFBa0M7UUFDdEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEdBQUcsQ0FBQyxHQUFHLElBQWtDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQVFELFdBQVcsQ0FBQyxPQUFtRCxFQUFFLE1BQTRDLEVBQzNHLE9BQXlDLEVBQ3pDLFVBQTZCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQVFE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