import { BasicType } from './BasicType';
import { EntityType } from './EntityType';
import { EmbeddableType } from './EmbeddableType';
import { ListAttribute } from './ListAttribute';
import { MapAttribute } from './MapAttribute';
import { SetAttribute } from './SetAttribute';
import { SingularAttribute } from './SingularAttribute';
import { PersistentError } from '../error';
import { Validator } from '../intersection';
export class ModelBuilder {
    constructor() {
        this.models = {};
        this.modelDescriptors = null;
        Object.keys(BasicType).forEach((typeName) => {
            const basicType = BasicType[typeName];
            if (basicType instanceof BasicType) {
                this.models[basicType.ref] = basicType;
            }
        });
    }
    /**
     * @param ref
     * @return
     */
    getModel(ref) {
        if (ref in this.models) {
            return this.models[ref];
        }
        const model = this.buildModel(ref);
        this.models[ref] = model;
        return model;
    }
    /**
     * @param modelDescriptors
     * @return
     */
    buildModels(modelDescriptors) {
        this.modelDescriptors = {};
        modelDescriptors.forEach((modelDescriptor) => {
            this.modelDescriptors[modelDescriptor.class] = modelDescriptor;
        });
        Object.keys(this.modelDescriptors).forEach((ref) => {
            try {
                const model = this.getModel(ref);
                this.buildAttributes(model);
            }
            catch (e) {
                throw new PersistentError(`Can't create model for entity class ${ref}`, e);
            }
        });
        // ensure at least an object entity
        this.getModel(EntityType.Object.ref);
        return this.models;
    }
    /**
     * @param ref
     * @return
     */
    buildModel(ref) {
        const modelDescriptor = this.modelDescriptors[ref];
        let type;
        if (ref === EntityType.Object.ref) {
            type = new EntityType.Object();
        }
        else if (modelDescriptor) {
            if (modelDescriptor.embedded) {
                type = new EmbeddableType(ref);
            }
            else {
                const superTypeIdentifier = modelDescriptor.superClass || EntityType.Object.ref;
                type = new EntityType(ref, this.getModel(superTypeIdentifier));
            }
        }
        else {
            throw new TypeError(`No model available for ${ref}`);
        }
        type.metadata = {};
        if (modelDescriptor) {
            type.metadata = modelDescriptor.metadata || {};
            const permissions = modelDescriptor.acl || {};
            Object.keys(permissions).forEach((permission) => {
                const permissionProperty = `${permission}Permission`;
                type[permissionProperty].fromJSON(permissions[permission]);
            });
        }
        return type;
    }
    /**
     * @param model
     * @return
     */
    buildAttributes(model) {
        const modelDescriptor = this.modelDescriptors[model.ref];
        const fields = modelDescriptor.fields;
        Object.keys(fields).forEach((name) => {
            const field = fields[name];
            if (!model.getAttribute(name)) { // skip predefined attributes
                model.addAttribute(this.buildAttribute(field), field.order);
            }
        });
        if (typeof modelDescriptor.validationCode === 'string') {
            // eslint-disable-next-line no-param-reassign
            model.validationCode = Validator.compile(model, modelDescriptor.validationCode);
        }
    }
    /**
     * @param field The field metadata
     * @param field.name The name of zhe field
     * @param field.type The type reference of the field
     * @param field.order The order number of the field
     * @param field.metadata Additional metadata of the field
     * @return
     */
    buildAttribute(field) {
        // TODO: remove readonly if createdAt and updatedAt becomes real metadata fields in the schema
        const isMetadata = field.flags && (field.flags.indexOf('METADATA') !== -1 || field.flags.indexOf('READONLY') !== -1);
        const { name } = field;
        const ref = field.type;
        if (ref.indexOf('/db/collection.') !== 0) {
            const singularAttribute = new SingularAttribute(name, this.getModel(ref), isMetadata);
            singularAttribute.metadata = field.metadata;
            return singularAttribute;
        }
        const collectionType = ref.substring(0, ref.indexOf('['));
        const elementType = ref.substring(ref.indexOf('[') + 1, ref.indexOf(']')).trim();
        switch (collectionType) {
            case ListAttribute.ref:
                return new ListAttribute(name, this.getModel(elementType));
            case SetAttribute.ref:
                return new SetAttribute(name, this.getModel(elementType));
            case MapAttribute.ref: {
                const keyType = elementType.substring(0, elementType.indexOf(',')).trim();
                const valueType = elementType.substring(elementType.indexOf(',') + 1).trim();
                return new MapAttribute(name, this.getModel(keyType), this.getModel(valueType));
            }
            default:
                throw new TypeError(`No collection available for ${ref}`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kZWxCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21ldGFtb2RlbC9Nb2RlbEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBSzNDLE9BQU8sRUFBYyxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RCxNQUFNLE9BQU8sWUFBWTtJQUt2QjtRQUpRLFdBQU0sR0FBZ0MsRUFBRSxDQUFDO1FBRXpDLHFCQUFnQixHQUFxQyxJQUFJLENBQUM7UUFHL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQWdDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDMUUsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLElBQUksU0FBUyxZQUFZLFNBQVMsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDO2FBQ3hDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUSxDQUFDLEdBQVc7UUFDbEIsSUFBSSxHQUFHLElBQUksSUFBSSxD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