import { CollectionType, PluralAttribute } from './PluralAttribute';
import { Attribute } from './Attribute';
import { PersistentError } from '../error';
export class MapAttribute extends PluralAttribute {
    /**
     * @param name
     * @param keyType
     * @param elementType
     */
    constructor(name, keyType, elementType) {
        super(name, Map, elementType);
        this.keyType = keyType;
    }
    /**
     * Get the type id for this map type
     * @return
     */
    static get ref() {
        return '/db/collection.Map';
    }
    /**
     * @inheritDoc
     */
    get collectionType() {
        return CollectionType.MAP;
    }
    /**
     * @inheritDoc
     */
    getJsonValue(state, object, options) {
        const value = this.getValue(object);
        if (!(value instanceof this.typeConstructor)) {
            return null;
        }
        const persisting = {};
        const persistedState = Attribute.attachState(value) || {};
        let changed = Attribute.attachSize(value) !== value.size;
        const json = {};
        const iter = value.entries();
        for (let el = iter.next(); !el.done; el = iter.next()) {
            const entry = el.value;
            if (entry[0] === null || entry[0] === undefined) {
                throw new PersistentError('Map keys can\'t be null nor undefined.');
            }
            const jsonKey = this.keyValue(this.keyType.toJsonValue(state, entry[0], options));
            json[jsonKey] = this.elementType.toJsonValue(state, entry[1], options);
            persisting[jsonKey] = [entry[0], entry[1]];
            changed = changed || (persistedState[jsonKey] || [])[1] !== entry[1];
        }
        if (options.persisting) {
            Attribute.attachState(value, persisting, true);
            Attribute.attachSize(value, value.size);
        }
        if (changed) {
            state.setDirty();
        }
        return json;
    }
    /**
     * @inheritDoc
     */
    setJsonValue(state, object, json, options) {
        let value = null;
        if (json) {
            value = this.getValue(object);
            if (!(value instanceof this.typeConstructor)) {
                // eslint-disable-next-line new-cap
                value = new this.typeConstructor();
            }
            const persisting = {};
            const persistedState = Attribute.attachState(value) || {};
            value.clear();
            const jsonKeys = Object.keys(json);
            for (let i = 0, len = jsonKeys.length; i < len; i += 1) {
                const jsonKey = jsonKeys[i];
                const persistedEntry = persistedState[jsonKey] || [];
                // ensures that "false" keys will be converted to false, disallow null as keys
                const key = this.keyType.fromJsonValue(state, jsonKey, persistedEntry[0], options);
                const val = this.elementType.fromJsonValue(state, json[jsonKey], persistedEntry[1], options);
                persisting[jsonKey] = [key, val];
                value.set(key, val);
            }
            if (options.persisting) {
                Attribute.attachState(value, persisting, true);
                Attribute.attachSize(value, value.size);
            }
        }
        this.setValue(object, value);
    }
    /**
     * @inheritDoc
     */
    toJSON() {
        return Object.assign({ type: `${MapAttribute.ref}[${this.keyType.ref},${this.elementType.ref}]` }, super.toJSON());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwQXR0cmlidXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21ldGFtb2RlbC9NYXBBdHRyaWJ1dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFNM0MsTUFBTSxPQUFPLFlBQW1CLFNBQVEsZUFBMkM7SUFrQmpGOzs7O09BSUc7SUFDSCxZQUFZLElBQVksRUFBRSxPQUFnQixFQUFFLFdBQW9CO1FBQzlELEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUF2QkQ7OztPQUdHO0lBQ0gsTUFBTSxLQUFLLEdBQUc7UUFDWixPQUFPLG9CQUFvQixDQUFDO0lBQzlCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksY0FBYztRQUNoQixPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUM7SUFDNUIsQ0FBQztJQVlEOztPQUVHO0lBQ0gsWUFBWSxDQUFDLEtBQW1CLEVBQUUsTUFBZSxFQUMvQyxPQUFxRjtRQUNyRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxDQUFDLEtBQUssWUFBWSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDNUMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sVUFBVSxHQUEwQyxFQUFFLENBQUM7UUFDN0QsTUFBTSxjQUFjLEdBQTBDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pHLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FB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