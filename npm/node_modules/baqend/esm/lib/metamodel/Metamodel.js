import { ManagedType } from './ManagedType';
import { EntityType } from './EntityType';
import { Enhancer } from '../binding';
import { ModelBuilder } from './ModelBuilder';
import { DbIndex } from './DbIndex';
import { Lockable, } from '../util';
import { StatusCode } from '../connector';
import * as message from '../message';
export class Metamodel extends Lockable {
    /**
     * Constructs a new metamodel instance which represents the complete schema of one baqend app
     * @param entityManagerFactory
     */
    constructor(entityManagerFactory) {
        super();
        /**
         * Defines if the Metamodel has been finalized
         */
        this.isInitialized = false;
        this.entities = {};
        this.embeddables = {};
        this.baseTypes = {};
        this.enhancer = new Enhancer();
        this.entityManagerFactory = entityManagerFactory;
    }
    /**
     * Prepare the Metamodel for custom schema creation
     * @param jsonMetamodel initialize the metamodel with the serialized json schema
     * @return
     */
    init(jsonMetamodel) {
        if (this.isInitialized) {
            throw new Error('Metamodel is already initialized.');
        }
        this.fromJSON(jsonMetamodel || []);
        this.isInitialized = true;
    }
    /**
     * @param arg
     * @return
     */
    getRef(arg) {
        let ref;
        if (typeof arg === 'string') {
            ref = arg;
            if (ref.indexOf('/db/') !== 0) {
                ref = `/db/${arg}`;
            }
        }
        else {
            ref = Enhancer.getIdentifier(arg);
        }
        return ref;
    }
    /**
     * Return the metamodel entity type representing the entity.
     *
     * @param typeConstructor - the type of the represented entity
     * @return the metamodel entity type or null if the class is not a managed entity
     */
    entity(typeConstructor) {
        const ref = this.getRef(typeConstructor);
        return ref ? this.entities[ref] : null;
    }
    /**
     * Return the metamodel basic type representing the native class.
     * @param typeConstructor - the type of the represented native class
     * @return the metamodel basic type
     */
    baseType(typeConstructor) {
        let ref = null;
        if (typeof typeConstructor === 'string') {
            ref = this.getRef(typeConstructor);
        }
        else {
            const baseTypesNames = Object.keys(this.baseTypes);
            for (let i = 0, len = baseTypesNames.length; i < len; i += 1) {
                const name = baseTypesNames[i];
                const type = this.baseTypes[name];
                if (!type.noResolving && type.typeConstructor === typeConstructor) {
                    ref = name;
                    break;
                }
            }
        }
        return ref ? this.baseTypes[ref] : null;
    }
    /**
     * Return the metamodel embeddable type representing the embeddable class.
     * @param typeConstructor - the type of the represented embeddable class
     * @return the metamodel embeddable type or null if the class is not a managed embeddable
     */
    embeddable(typeConstructor) {
        const ref = this.getRef(typeConstructor);
        return ref ? this.embeddables[ref] : null;
    }
    /**
     * Return the metamodel managed type representing the entity, mapped superclass, or embeddable class.
     *
     * @param typeConstructor - the type of the represented managed class
     * @return the metamodel managed type
     */
    managedType(typeConstructor) {
        return this.entity(typeConstructor) || this.embeddable(typeConstructor);
    }
    /**
     * @param type
     * @return the added type
     */
    addType(type) {
        let types = {};
        if (type.isBasic) {
            types = this.baseTypes;
        }
        else if (type.isEmbeddable) {
            type.init(this.enhancer);
            types = this.embeddables;
        }
        else if (type.isEntity) {
            const entityType = type;
            entityType.init(this.enhancer);
            types = this.entities;
            if (entityType.superType === null && entityType.ref !== EntityType.Object.ref) {
                entityType.superType = this.entity(EntityType.Object.ref);
            }
        }
        if (types[type.ref]) {
            throw new Error(`The type ${type.ref} is already declared.`);
        }
        types[type.ref] = type;
        return type;
    }
    /**
     * Load all schema data from the server
     * @return
     */
    load() {
        if (!this.isInitialized) {
            return this.withLock(() => {
                const msg = new message.GetAllSchemas();
                return this.entityManagerFactory.send(msg).then((response) => {
                    this.init(response.entity);
                    return this;
                });
            });
        }
        throw new Error('Metamodel is already initialized.');
    }
    /**
     * Store all local schema data on the server, or the provided one
     *
     * Note: The schema must be initialized, by init or load
     *
     * @param managedType The specific type to persist, if omitted the complete schema
     * will be updated
     * @return
     */
    save(managedType) {
        return this.sendUpdate(managedType || this.toJSON()).then(() => this);
    }
    /**
     * Update the metamodel with the schema
     *
     * The provided data object will be forwarded to the UpdateAllSchemas resource.
     * The underlying schema of this Metamodel object will be replaced by the result.
     *
     * @param data The JSON which will be send to the UpdateAllSchemas resource.
     * @return
     */
    update(data) {
        return this.sendUpdate(data).then((response) => {
            this.fromJSON(response.entity);
            return this;
        });
    }
    sendUpdate(data) {
        return this.withLock(() => {
            let msg;
            if (data instanceof ManagedType) {
                msg = new message.UpdateSchema(data.name, data.toJSON());
            }
            else {
                msg = new message.UpdateAllSchemas(data);
            }
            return this.entityManagerFactory.send(msg);
        });
    }
    /**
     * Get the current schema types as json
     * @return the json data
     */
    toJSON() {
        if (!this.isInitialized) {
            throw new Error('Metamodel is not initialized.');
        }
        return [].concat(Object.keys(this.entities).map((ref) => this.entities[ref].toJSON()), Object.keys(this.embeddables).map((ref) => this.embeddables[ref].toJSON()));
    }
    /**
     * Replace the current schema by the provided one in json
     * @param json The json schema data
     * @return
     */
    fromJSON(json) {
        const builder = new ModelBuilder();
        const models = builder.buildModels(json);
        this.baseTypes = {};
        this.embeddables = {};
        this.entities = {};
        Object.keys(models).forEach((ref) => this.addType(models[ref]));
    }
    /**
     * Creates an index
     *
     * @param bucket Name of the Bucket
     * @param index Will be applied for the given bucket
     * @return
     */
    createIndex(bucket, index) {
        const msg = new message.CreateDropIndex(bucket, Object.assign(Object.assign({}, index.toJSON()), { drop: false }));
        return this.entityManagerFactory.send(msg);
    }
    /**
     * Drops an index
     *
     * @param bucket Name of the Bucket
     * @param index Will be dropped for the given bucket
     * @return
     */
    dropIndex(bucket, index) {
        const msg = new message.CreateDropIndex(bucket, Object.assign(Object.assign({}, index.toJSON()), { drop: true }));
        return this.entityManagerFactory.send(msg);
    }
    /**
     * Drops all indexes
     *
     * @param bucket Indexes will be dropped for the given bucket
     * @return
     */
    dropAllIndexes(bucket) {
        const msg = new message.DropAllIndexes(bucket);
        return this.entityManagerFactory.send(msg);
    }
    /**
     * Loads all indexes for the given bucket
     *
     * @param bucket Current indexes will be loaded for the given bucket
     * @return
     */
    getIndexes(bucket) {
        const msg = new message.ListIndexes(bucket);
        return this.entityManagerFactory.send(msg)
            .then((response) => response.entity.map((el) => new DbIndex(el.keys, el.unique)))
            .catch((e) => {
            if (e.status === StatusCode.BUCKET_NOT_FOUND || e.status === StatusCode.OBJECT_NOT_FOUND) {
                return null;
            }
            throw e;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,