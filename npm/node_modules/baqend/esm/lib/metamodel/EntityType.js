var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
// eslint-disable-next-line max-classes-per-file
import { DeviceFactory, Entity, EntityFactory, Role, User, UserFactory, } from '../binding';
import { ManagedType } from './ManagedType';
import { PersistenceType } from './Type';
import { BasicType } from './BasicType';
import { SingularAttribute } from './SingularAttribute';
import { PluralAttribute } from './PluralAttribute';
import { Attribute } from './Attribute';
import { Metadata, Permission } from '../intersection';
export class EntityType extends ManagedType {
    /**
     * @param ref
     * @param superType
     * @param typeConstructor
     */
    constructor(ref, superType, typeConstructor) {
        super(ref, typeConstructor);
        this.declaredId = null;
        this.declaredVersion = null;
        this.declaredAcl = null;
        this.loadPermission = new Permission();
        this.updatePermission = new Permission();
        this.deletePermission = new Permission();
        this.queryPermission = new Permission();
        this.schemaSubclassPermission = new Permission();
        this.insertPermission = new Permission();
        this.superType = superType;
    }
    /**
     * @inheritDoc
     */
    get persistenceType() {
        return PersistenceType.ENTITY;
    }
    get id() {
        return this.declaredId || this.superType.id;
    }
    get version() {
        return this.declaredVersion || this.superType.version;
    }
    get acl() {
        return this.declaredAcl || this.superType.acl;
    }
    /**
     * @inheritDoc
     */
    createProxyClass() {
        let { typeConstructor } = this.superType;
        if (typeConstructor === Object) {
            switch (this.name) {
                case 'User':
                    typeConstructor = User;
                    break;
                case 'Role':
                    typeConstructor = Role;
                    break;
                default:
                    typeConstructor = Entity;
                    break;
            }
        }
        return this.enhancer.createProxy(typeConstructor);
    }
    /**
     * Gets all on this class referencing attributes
     *
     * @param db The instances will be found by this EntityManager
     * @param [options] Some options to pass
     * @param [options.classes] An array of class names to filter for, null for no filter
     * @return A map from every referencing class to a set of its referencing attribute names
     */
    getReferencing(db, options) {
        const opts = Object.assign({}, options);
        const { entities } = db.metamodel;
        const referencing = new Map();
        const names = Object.keys(entities);
        for (let i = 0, len = names.length; i < len; i += 1) {
            const name = names[i];
            // Skip class if not in class filter
            if (!opts.classes || opts.classes.indexOf(name) !== -1) {
                const entity = entities[name];
                const iter = entity.attributes();
                for (let el = iter.next(); !el.done; el = iter.next()) {
                    const attr = el.value;
                    // Filter only referencing singular and collection attributes
                    if ((attr instanceof SingularAttribute && attr.type === this)
                        || (attr instanceof PluralAttribute && attr.elementType === this)) {
                        const typeReferences = referencing.get(attr.declaringType) || new Set();
                        typeReferences.add(attr.name);
                        referencing.set(attr.declaringType, typeReferences);
                    }
                }
            }
        }
        return referencing;
    }
    /**
     * @inheritDoc
     */
    createObjectFactory(db) {
        switch (this.name) {
            case 'User':
                return UserFactory.create(this, db);
            case 'Device':
                return DeviceFactory.create(this, db);
            default:
                return EntityFactory.create(this, db);
        }
    }
    /**
     * @param state The root object state, can be <code>null</code> if a currentObject is provided
     * @param jsonObject The json data to merge
     * @param currentObject The object where the jsonObject will be merged into, if the current object is null,
     * a new instance will be created
     * @param options The options used to apply the json
     * @param [options.persisting=false] indicates if the current state will be persisted.
     * Used to update the internal change tracking state of collections and mark the object persistent or dirty afterwards
     * @param [options.onlyMetadata=false] Indicates if only the metadata should be updated
     * @return The merged entity instance
     */
    fromJsonValue(state, jsonObject, currentObject, options) {
        var _a, _b;
        // handle references
        if (typeof jsonObject === 'string') {
            return ((_a = state.db) === null || _a === void 0 ? void 0 : _a.getReference(jsonObject)) || null;
        }
        if (!jsonObject || typeof jsonObject !== 'object') {
            return null;
        }
        const json = jsonObject;
        const opt = Object.assign({ persisting: false, onlyMetadata: false }, options);
        let obj;
        if (currentObject) {
            const currentObjectState = Metadata.get(currentObject);
            // merge state into the current object if:
            // 1. The provided json does not contains an id and we have an already created object for it
            // 2. The object was created without an id and was later fetched from the server (e.g. User/Role)
            // 3. The provided json has the same id as the current object, they can differ on embedded json for a reference
            if (!json.id || !currentObjectState.id || json.id === currentObjectState.id) {
                obj = currentObject;
            }
        }
        if (!obj) {
            obj = (_b = state.db) === null || _b === void 0 ? void 0 : _b.getReference(this.typeConstructor, json.id);
        }
        if (!obj) {
            return null;
        }
        const objectState = Metadata.get(obj);
        // deserialize our properties
        objectState.enable(false);
        super.fromJsonValue(objectState, json, obj, opt);
        objectState.enable(true);
        if (opt.persisting) {
            objectState.setPersistent();
        }
        else if (!opt.onlyMetadata) {
            objectState.setDirty();
        }
        return obj;
    }
    /**
     * Converts the given object to json
     * @param state The root object state
     * @param object The object to convert
     * @param [options=false] to json options by default excludes the metadata
     * @param [options.excludeMetadata=false] Excludes the metadata form the serialized json
     * @param [options.depth=0] Includes up to depth referenced objects into the serialized json
     * @param [options.persisting=false] indicates if the current state will be persisted.
     *  Used to update the internal change tracking state of collections and mark the object persistent if its true
     * @return JSON-Object
     */
    toJsonValue(state, object, options) {
        const { depth = 0, persisting = false } = options || {};
        const isInDepth = depth === true || depth > -1;
        // check if object is already loaded in state
        const objectState = object && Metadata.get(object);
        if (isInDepth && objectState && objectState.isAvailable) {
            // serialize our properties
            objectState.enable(false);
            const json = super.toJsonValue(objectState, object, Object.assign(Object.assign({}, options), { persisting, depth: typeof depth === 'boolean' ? depth : depth - 1 }));
            objectState.enable(true);
            return json;
        }
        if (state.db && object instanceof this.typeConstructor) {
            object.attach(state.db);
            return object.id;
        }
        return null;
    }
    toString() {
        return `EntityType(${this.ref})`;
    }
    toJSON() {
        const _a = super.toJSON(), { acl } = _a, json = __rest(_a, ["acl"]);
        return Object.assign(Object.assign({}, json), { acl: Object.assign(Object.assign({}, acl), { schemaSubclass: this.schemaSubclassPermission.toJSON(), load: this.loadPermission.toJSON(), insert: this.insertPermission.toJSON(), update: this.updatePermission.toJSON(), delete: this.deletePermission.toJSON(), query: this.queryPermission.toJSON() }) });
    }
}
EntityType.Object = class ObjectType extends EntityType {
    static get ref() {
        return '/db/Object';
    }
    constructor() {
        super(EntityType.Object.ref, null, Object);
        this.declaredId = new class extends SingularAttribute {
            constructor() {
                super('id', BasicType.String, true);
            }
            getJsonValue(state) {
                return state.id || undefined;
            }
            setJsonValue(state, object, jsonValue) {
                if (!state.id) {
                    // eslint-disable-next-line no-param-reassign
                    state.id = jsonValue;
                }
            }
        }();
        this.declaredId.init(this, 0);
        this.declaredId.isId = true;
        this.declaredVersion = new class extends SingularAttribute {
            constructor() {
                super('version', BasicType.Integer, true);
            }
            getJsonValue(state) {
                return state.version || undefined;
            }
            setJsonValue(state, object, jsonValue) {
                if (jsonValue) {
                    // eslint-disable-next-line no-param-reassign
                    state.version = jsonValue;
                }
            }
        }();
        this.declaredVersion.init(this, 1);
        this.declaredVersion.isVersion = true;
        this.declaredAcl = new class extends SingularAttribute {
            constructor() {
                super('acl', BasicType.JsonObject, true);
            }
            getJsonValue(state, object, options) {
                const persisted = Attribute.attachState(object, {});
                const persistedAcl = persisted.acl || {};
                const acl = state.acl.toJSON();
                const unchanged = Object.keys(acl).every((permission) => {
                    const oldPermission = (persistedAcl[permission] || {});
                    const newPermission = acl[permission];
                    const newKeys = Object.keys(newPermission);
                    const oldKeys = Object.keys(oldPermission);
                    return newKeys.length === oldKeys.length
                        && newKeys.every((ref) => oldPermission[ref] === newPermission[ref]);
                });
                if (!unchanged) {
                    state.setDirty();
                }
                if (options.persisting) {
                    persisted.acl = acl;
                }
                return acl;
            }
            setJsonValue(state, object, jsonValue, options) {
                const acl = (jsonValue || {});
                if (options.persisting) {
                    const persistedState = Attribute.attachState(object, {});
                    persistedState.acl = acl;
                }
                state.acl.fromJSON(acl);
            }
        }();
        this.declaredAcl.init(this, 2);
        this.declaredAcl.isAcl = true;
        this.declaredAttributes = [this.declaredId, this.declaredVersion, this.declaredAcl];
    }
    createObjectFactory() {
        throw new Error("Objects can't be directly created and persisted");
    }
};
//# sourceMappingURL=data:application/json;base64,