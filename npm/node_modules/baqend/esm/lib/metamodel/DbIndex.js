/**
 * Creates a new index instance which is needed to create an
 * database index.
 */
export class DbIndex {
    /**
     * @param keys The name of the field which will be used
     * for the index,
     * an object of an field and index type combination or
     * an array of objects to create an compound index
     * @param unique Indicates if the index will be unique
     */
    constructor(keys, unique) {
        if (typeof keys === 'string') {
            const key = {};
            key[keys] = DbIndex.ASC;
            this.keys = [key];
        }
        else if (Array.isArray(keys)) {
            this.keys = keys;
        }
        else if (keys) {
            this.keys = [keys];
        }
        else {
            throw new Error('The keys parameter must be an String, Object or Array.');
        }
        this.unique = unique === true;
    }
    /**
     * Returns DbIndex Object created from the given JSON
     * @param json
     * @return
     */
    static fromJSON(json) {
        return new DbIndex(json.keys, json.unique);
    }
    /**
     * Indicates if this index is for the given field or includes it in a compound index
     * @param name The name of the field to check for
     * @return <code>true</code> if the index contains this field
     */
    hasKey(name) {
        for (let i = 0; i < this.keys.length; i += 1) {
            if (this.keys[i][name]) {
                return true;
            }
        }
        return false;
    }
    /**
     * Indicates if this index is a compound index of multiple attributes
     * @type boolean
     * @readonly
     */
    get isCompound() {
        return this.keys.length > 1;
    }
    /**
     * Indicates if this index is an unique index
     * @type boolean
     * @readonly
     */
    get isUnique() {
        return this.unique;
    }
    /**
     * Returns a JSON representation of the Index object
     *
     * @return A Json of this Index object
     */
    toJSON() {
        return {
            unique: this.unique,
            keys: this.keys,
        };
    }
}
DbIndex.ASC = 'asc';
DbIndex.DESC = 'desc';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGJJbmRleC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tZXRhbW9kZWwvRGJJbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQTs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sT0FBTztJQXVCbEI7Ozs7OztPQU1HO0lBQ0gsWUFBWSxJQUFtRCxFQUFFLE1BQWdCO1FBQy9FLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzVCLE1BQU0sR0FBRyxHQUEwQixFQUFFLENBQUM7WUFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO2FBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQ2xCO2FBQU0sSUFBSSxJQUFJLEVBQUU7WUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEI7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztTQUMzRTtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxLQUFLLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBOUJEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQWE7UUFDbEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBaUIsRUFBRSxJQUFJLENBQUMsTUFBaUIsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUF5QkQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDdEIsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTTtRQUNKLE9BQU87WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2hCLENBQUM7SUFDSixDQUFDOztBQXZGc0IsV0FBRyxHQUFHLEtBQUssQ0FBQztBQUVaLFlBQUksR0FBRyxNQUFNLENBQUMifQ==