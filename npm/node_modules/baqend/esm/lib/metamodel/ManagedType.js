import { Type } from './Type';
import { Enhancer, Entity, Managed, } from '../binding';
import { Permission } from '../intersection';
export class ManagedType extends Type {
    /**
     * @param ref or full class name
     * @param typeConstructor The type constructor of the managed lass
     */
    constructor(ref, typeConstructor) {
        super(ref.indexOf('/db/') !== 0 ? `/db/${ref}` : ref, typeConstructor);
        this.enhancer = null;
        this.declaredAttributes = [];
        this.schemaAddPermission = new Permission();
        this.schemaReplacePermission = new Permission();
        this.metadata = null;
        this.superType = null;
        this._validationCode = null;
    }
    /**
     * @type Function
     */
    get validationCode() {
        return this._validationCode;
    }
    /**
     * @param code
     */
    set validationCode(code) {
        this._validationCode = code;
    }
    /**
     * The Managed class
     */
    get typeConstructor() {
        if (!this._typeConstructor) {
            this.typeConstructor = this.createProxyClass();
        }
        return this._typeConstructor;
    }
    /**
     * The Managed class constructor
     * @param typeConstructor The managed class constructor
     */
    set typeConstructor(typeConstructor) {
        if (this._typeConstructor) {
            throw new Error('Type constructor has already been set.');
        }
        const isEntity = typeConstructor.prototype instanceof Entity;
        if (this.isEntity) {
            if (!isEntity) {
                throw new TypeError('Entity classes must extends the Entity class.');
            }
        }
        else if (!(typeConstructor.prototype instanceof Managed) || isEntity) {
            throw new TypeError('Embeddable classes must extends the Managed class.');
        }
        this.enhancer.enhance(this, typeConstructor);
        this._typeConstructor = typeConstructor;
    }
    /**
     * Initialize this type
     * @param enhancer The class enhancer used to instantiate an instance of this managed class
     */
    init(enhancer) {
        this.enhancer = enhancer;
        if (this._typeConstructor && !Enhancer.getIdentifier(this._typeConstructor)) {
            Enhancer.setIdentifier(this._typeConstructor, this.ref);
        }
    }
    /**
     * Creates a new instance of the managed type, without invoking any constructors
     *
     * This method is used to create object instances which are loaded form the backend.
     *
     * @return The created instance
     */
    create() {
        const instance = Object.create(this.typeConstructor.prototype);
        Managed.init(instance);
        return instance;
    }
    /**
     * An iterator which returns all attributes declared by this type and inherited form all super types
     * @return
     */
    attributes() {
        let iter;
        let index = 0;
        const type = this;
        if (this.superType) {
            iter = this.superType.attributes();
        }
        return {
            [Symbol.iterator]() {
                return this;
            },
            next() {
                if (iter) {
                    const item = iter.next();
                    if (!item.done) {
                        return item;
                    }
                    iter = null;
                }
                if (index < type.declaredAttributes.length) {
                    const value = type.declaredAttributes[index];
                    index += 1;
                    return { value, done: false };
                }
                return { done: true, value: undefined };
            },
        };
    }
    /**
     * Adds an attribute to this type
     * @param attr The attribute to add
     * @param order Position of the attribute
     * @return
     */
    addAttribute(attr, order) {
        if (this.getAttribute(attr.name)) {
            throw new Error(`An attribute with the name ${attr.name} is already declared.`);
        }
        let initOrder;
        if (!attr.order) {
            initOrder = typeof order === 'undefined' ? this.declaredAttributes.length : order;
        }
        else {
            initOrder = attr.order;
        }
        attr.init(this, initOrder);
        this.declaredAttributes.push(attr);
        if (this._typeConstructor && this.name !== 'Object') {
            this.enhancer.enhanceProperty(this._typeConstructor, attr);
        }
    }
    /**
     * Removes an attribute from this type
     * @param name The Name of the attribute which will be removed
     * @return
     */
    removeAttribute(name) {
        const { length } = this.declaredAttributes;
        this.declaredAttributes = this.declaredAttributes.filter((val) => val.name !== name);
        if (length === this.declaredAttributes.length) {
            throw new Error(`An Attribute with the name ${name} is not declared.`);
        }
    }
    /**
     * @param name
     * @return
     */
    getAttribute(name) {
        let attr = this.getDeclaredAttribute(name);
        if (!attr && this.superType) {
            attr = this.superType.getAttribute(name);
        }
        return attr;
    }
    /**
     * @param val Name or order of the attribute
     * @return
     */
    getDeclaredAttribute(val) {
        return this.declaredAttributes.filter((attr) => attr.name === val || attr.order === val)[0] || null;
    }
    /**
     * @inheritDoc
     */
    fromJsonValue(state, jsonObject, currentObject, options) {
        if (!jsonObject || !currentObject) {
            return null;
        }
        const iter = this.attributes();
        for (let el = iter.next(); !el.done; el = iter.next()) {
            const attribute = el.value;
            if (!options.onlyMetadata || attribute.isMetadata) {
                attribute.setJsonValue(state, currentObject, jsonObject[attribute.name], options);
            }
        }
        return currentObject;
    }
    /**
     * @inheritDoc
     */
    toJsonValue(state, object, options) {
        if (!(object instanceof this.typeConstructor)) {
            return null;
        }
        const value = {};
        const iter = this.attributes();
        for (let el = iter.next(); !el.done; el = iter.next()) {
            const attribute = el.value;
            if (!options.excludeMetadata || !attribute.isMetadata) {
                value[attribute.name] = attribute.getJsonValue(state, object, options);
            }
        }
        return value;
    }
    /**
     * Converts ths type schema to json
     * @return
     */
    toJSON() {
        const fields = {};
        this.declaredAttributes.forEach((attribute) => {
            if (!attribute.isMetadata) {
                fields[attribute.name] = attribute;
            }
        });
        return Object.assign(Object.assign(Object.assign({ class: this.ref, fields, acl: {
                schemaAdd: this.schemaAddPermission.toJSON(),
                schemaReplace: this.schemaReplacePermission.toJSON(),
            } }, (this.superType && { superClass: this.superType.ref })), (this.isEmbeddable && { embedded: true })), (this.metadata && { metadata: this.metadata }));
    }
    /**
     * Returns iterator to get all referenced entities
     * @return
     */
    references() {
        const attributes = this.attributes();
        let attribute;
        let embeddedAttributes;
        return {
            [Symbol.iterator]() {
                return this;
            },
            next() {
                for (;;) {
                    if (embeddedAttributes) {
                        const item = embeddedAttributes.next();
                        if (!item.done) {
                            return { value: { path: [attribute.name].concat(item.value.path) } };
                        }
                        embeddedAttributes = null;
                    }
                    const item = attributes.next();
                    if (item.done) {
                        // currently TS requires a undefined value here https://github.com/microsoft/TypeScript/issues/38479
                        return { done: true, value: undefined };
                    }
                    attribute = item.value;
                    const type = attribute.isCollection
                        ? attribute.elementType
                        : attribute.type;
                    if (type.isEntity) {
                        return { value: { path: [attribute.name] } };
                    }
                    if (type.isEmbeddable) {
                        embeddedAttributes = type.references();
                    }
                }
            },
        };
    }
    /**
     * Retrieves whether this type has specific metadata
     *
     * @param key
     * @return
     */
    hasMetadata(key) {
        return !!this.metadata && !!this.metadata[key];
    }
    /**
     * Gets some metadata of this type
     *
     * @param key
     * @return
     */
    getMetadata(key) {
        if (!this.hasMetadata(key)) {
            return null;
        }
        return this.metadata[key];
    }
}
//# sourceMappingURL=data:application/json;base64,