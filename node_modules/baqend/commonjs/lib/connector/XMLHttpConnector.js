"use strict";
/* this connector will only be choose in browser compatible environments */
/* eslint no-restricted-globals: ["off", "addEventListener", "removeEventListener"] */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.XMLHttpConnector = void 0;
var Connector_1 = require("./Connector");
var util_1 = require("../util");
var XMLHttpConnector = /** @class */ (function (_super) {
    __extends(XMLHttpConnector, _super);
    function XMLHttpConnector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    XMLHttpConnector.isUsable = function (host, port, secure, basePath) {
        return typeof XMLHttpRequest !== 'undefined';
    };
    /**
     * @inheritDoc
     */
    XMLHttpConnector.prototype.doSend = function (message, request, receive) {
        var _this = this;
        if (request.method === 'OAUTH') {
            if (this.oAuthHandle) {
                this.oAuthHandle({ status: 409, headers: {}, entity: '{"message": "A new OAuth request was sent."}' });
            }
            localStorage.removeItem('oauth-response');
            var handler_1 = function (event) {
                if (event.key === 'oauth-response' && _this.oAuthHandle && event.newValue) {
                    _this.oAuthHandle(JSON.parse(event.newValue));
                }
            };
            this.oAuthHandle = function (msg) {
                receive(msg);
                localStorage.removeItem('oauth-response');
                removeEventListener('storage', handler_1, false);
            };
            addEventListener('storage', handler_1, false);
            return;
        }
        var xhr = new XMLHttpRequest();
        var url = this.origin + this.basePath + request.path;
        xhr.onreadystatechange = function () {
            // if we receive an error switch the response type to json
            if (xhr.responseType && xhr.readyState === 2 && xhr.status >= 400) {
                xhr.responseType = 'text';
            }
            if (xhr.readyState === 4) {
                var response_1 = {
                    headers: {},
                    status: xhr.status,
                    entity: xhr.response || xhr.responseText,
                };
                Connector_1.Connector.RESPONSE_HEADERS.forEach(function (name) {
                    response_1.headers[name] = xhr.getResponseHeader(name) || '';
                });
                receive(response_1);
            }
        };
        // Set the message progress callback
        if (xhr.upload && message.progress()) {
            xhr.upload.onprogress = message.progress();
        }
        xhr.open(request.method, url, true);
        var entity = request.entity;
        var headers = request.headers;
        var headerNames = Object.keys(headers);
        for (var i = 0, len = headerNames.length; i < len; i += 1) {
            var headerName = headerNames[i];
            xhr.setRequestHeader(headerName, headers[headerName]);
        }
        xhr.withCredentials = message.withCredentials;
        switch (message.responseType()) {
            case 'arraybuffer':
                xhr.responseType = 'arraybuffer';
                break;
            case 'blob':
            case 'data-url':
            case 'base64':
                xhr.responseType = 'blob';
                break;
            default:
            // ignore
        }
        xhr.send(entity);
    };
    /**
     * @inheritDoc
     */
    XMLHttpConnector.prototype.fromFormat = function (response, entity, type) {
        if (type === 'json') {
            return JSON.parse(entity);
        }
        if (type === 'data-url' || type === 'base64') {
            var reader_1 = new FileReader();
            reader_1.readAsDataURL(entity);
            return new Promise(function (resolve, reject) {
                reader_1.onload = resolve;
                reader_1.onerror = reject;
            }).then(function () {
                var result = reader_1.result;
                if (type === 'base64' && typeof result === 'string') {
                    result = result.substring(result.indexOf(',') + 1);
                }
                return result;
            });
        }
        return entity;
    };
    /**
     * @inheritDoc
     */
    XMLHttpConnector.prototype.toFormat = function (message) {
        var type = message.request.type;
        if (type) {
            var entity = message.request.entity;
            var mimeType = message.mimeType();
            switch (type) {
                case 'blob':
                    mimeType = mimeType || entity.type;
                    break;
                case 'arraybuffer':
                case 'form':
                    break;
                case 'data-url': {
                    var match = entity.match(/^data:(.+?)(;base64)?,(.*)$/);
                    var isBase64 = match[2];
                    // eslint-disable-next-line prefer-destructuring
                    entity = match[3];
                    type = 'blob';
                    mimeType = mimeType || match[1];
                    if (!isBase64) {
                        entity = decodeURIComponent(entity);
                        break;
                    }
                }
                // fallthrough
                case 'base64': {
                    var binaryStr = util_1.atob(entity);
                    var len = binaryStr.length;
                    var array = new Uint8Array(len);
                    for (var i = 0; i < len; i += 1) {
                        array[i] = binaryStr.charCodeAt(i);
                    }
                    type = 'blob';
                    entity = new Blob([array], { type: mimeType });
                    break;
                }
                case 'json':
                    if (typeof entity !== 'string') {
                        entity = JSON.stringify(entity);
                    }
                    break;
                case 'text':
                    break;
                default:
                    throw new Error("Supported request format:" + type);
            }
            message.entity(entity, type).mimeType(mimeType);
        }
    };
    return XMLHttpConnector;
}(Connector_1.Connector));
exports.XMLHttpConnector = XMLHttpConnector;
Connector_1.Connector.connectors.push(XMLHttpConnector);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWE1MSHR0cENvbm5lY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb25uZWN0b3IvWE1MSHR0cENvbm5lY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMkVBQTJFO0FBQzNFLHNGQUFzRjs7Ozs7Ozs7Ozs7Ozs7OztBQUV0Rix5Q0FFcUI7QUFDckIsZ0NBQStCO0FBRy9CO0lBQXNDLG9DQUFTO0lBQS9DOztJQW9MQSxDQUFDO0lBakxDOztPQUVHO0lBQ0gsNkRBQTZEO0lBQ3RELHlCQUFRLEdBQWYsVUFBZ0IsSUFBWSxFQUFFLElBQVksRUFBRSxNQUFlLEVBQUUsUUFBZ0I7UUFDM0UsT0FBTyxPQUFPLGNBQWMsS0FBSyxXQUFXLENBQUM7SUFDL0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gsaUNBQU0sR0FBTixVQUFPLE9BQWdCLEVBQUUsT0FBZ0IsRUFBRSxPQUFpQjtRQUE1RCxpQkFnRkM7UUEvRUMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtZQUM5QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLDhDQUE4QyxFQUFFLENBQUMsQ0FBQzthQUN4RztZQUVELFlBQVksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUUxQyxJQUFNLFNBQU8sR0FBRyxVQUFDLEtBQW1CO2dCQUNsQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssZ0JBQWdCLElBQUksS0FBSSxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO29CQUN4RSxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7aUJBQzlDO1lBQ0gsQ0FBQyxDQUFDO1lBRUYsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFDLEdBQWE7Z0JBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDYixZQUFZLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQzFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxTQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDakQsQ0FBQyxDQUFDO1lBRUYsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFNBQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM1QyxPQUFPO1NBQ1I7UUFFRCxJQUFNLEdBQUcsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ2pDLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBRXZELEdBQUcsQ0FBQyxrQkFBa0IsR0FBRztZQUN2QiwwREFBMEQ7WUFDMUQsSUFBSSxHQUFHLENBQUMsWUFBWSxJQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFO2dCQUNqRSxHQUFHLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQzthQUMzQjtZQUVELElBQUksR0FBRyxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7Z0JBQ3hCLElBQU0sVUFBUSxHQUFhO29CQUN6QixPQUFPLEVBQUUsRUFBRTtvQkFDWCxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07b0JBQ2xCLE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxZQUFZO2lCQUN6QyxDQUFDO2dCQUVGLHFCQUFTLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSTtvQkFDdEMsVUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUM3RCxDQUFDLENBQUMsQ0FBQztnQkFFSCxPQUFPLENBQUMsVUFBUSxDQUFDLENBQUM7YUFDbkI7UUFDSCxDQUFDLENBQUM7UUFFRixvQ0FBb0M7UUFDcEMsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNwQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDNUM7UUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTVCLElBQUEsTUFBTSxHQUFLLE9BQU8sT0FBWixDQUFhO1FBQ25CLElBQUEsT0FBTyxHQUFLLE9BQU8sUUFBWixDQUFhO1FBRTVCLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pELElBQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQ3ZEO1FBRUQsR0FBRyxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDO1FBRTlDLFFBQVEsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFO1lBQzlCLEtBQUssYUFBYTtnQkFDaEIsR0FBRyxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUM7Z0JBQ2pDLE1BQU07WUFDUixLQUFLLE1BQU0sQ0FBQztZQUNaLEtBQUssVUFBVSxDQUFDO1lBQ2hCLEtBQUssUUFBUTtnQkFDWCxHQUFHLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztnQkFDMUIsTUFBTTtZQUNSLFFBQVE7WUFDTixTQUFTO1NBQ1o7UUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7T0FFRztJQUNILHFDQUFVLEdBQVYsVUFBVyxRQUFrQixFQUFFLE1BQVcsRUFBRSxJQUE2QjtRQUN2RSxJQUFJLElBQUksS0FBSyxNQUFNLEVBQUU7WUFDbkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNCO1FBRUQsSUFBSSxJQUFJLEtBQUssVUFBVSxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDNUMsSUFBTSxRQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNoQyxRQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRTdCLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtnQkFDakMsUUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7Z0JBQ3hCLFFBQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDQSxJQUFBLE1BQU0sR0FBSyxRQUFNLE9BQVgsQ0FBWTtnQkFFeEIsSUFBSSxJQUFJLEtBQUssUUFBUSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtvQkFDbkQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDcEQ7Z0JBRUQsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNILG1DQUFRLEdBQVIsVUFBUyxPQUFnQjtRQUNqQixJQUFBLElBQUksR0FBSyxPQUFPLENBQUMsT0FBTyxLQUFwQixDQUFxQjtRQUUvQixJQUFJLElBQUksRUFBRTtZQUNGLElBQUEsTUFBTSxHQUFLLE9BQU8sQ0FBQyxPQUFPLE9BQXBCLENBQXFCO1lBQ2pDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNsQyxRQUFRLElBQUksRUFBRTtnQkFDWixLQUFLLE1BQU07b0JBQ1QsUUFBUSxHQUFHLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDO29CQUNuQyxNQUFNO2dCQUNSLEtBQUssYUFBYSxDQUFDO2dCQUNuQixLQUFLLE1BQU07b0JBQ1QsTUFBTTtnQkFDUixLQUFLLFVBQVUsQ0FBQyxDQUFDO29CQUNmLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztvQkFDMUQsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMxQixnREFBZ0Q7b0JBQ2hELE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRWxCLElBQUksR0FBRyxNQUFNLENBQUM7b0JBQ2QsUUFBUSxHQUFHLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2hDLElBQUksQ0FBQyxRQUFRLEVBQUU7d0JBQ2IsTUFBTSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO3dCQUNwQyxNQUFNO3FCQUNQO2lCQUNGO2dCQUNELGNBQWM7Z0JBQ2QsS0FBSyxRQUFRLENBQUMsQ0FBQztvQkFDYixJQUFNLFNBQVMsR0FBRyxXQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQy9CLElBQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7b0JBQzdCLElBQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7d0JBQy9CLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUNwQztvQkFDRCxJQUFJLEdBQUcsTUFBTSxDQUFDO29CQUNkLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7b0JBQy9DLE1BQU07aUJBQ1A7Z0JBQ0QsS0FBSyxNQUFNO29CQUNULElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO3dCQUM5QixNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztxQkFDakM7b0JBQ0QsTUFBTTtnQkFDUixLQUFLLE1BQU07b0JBQ1QsTUFBTTtnQkFDUjtvQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE0QixJQUFNLENBQUMsQ0FBQzthQUN2RDtZQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqRDtJQUNILENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUFwTEQsQ0FBc0MscUJBQVMsR0FvTDlDO0FBcExZLDRDQUFnQjtBQXNMN0IscUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMifQ==