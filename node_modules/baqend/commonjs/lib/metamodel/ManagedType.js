"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedType = void 0;
var Type_1 = require("./Type");
var binding_1 = require("../binding");
var intersection_1 = require("../intersection");
var ManagedType = /** @class */ (function (_super) {
    __extends(ManagedType, _super);
    /**
     * @param ref or full class name
     * @param typeConstructor The type constructor of the managed lass
     */
    function ManagedType(ref, typeConstructor) {
        var _this = _super.call(this, ref.indexOf('/db/') !== 0 ? "/db/" + ref : ref, typeConstructor) || this;
        _this.enhancer = null;
        _this.declaredAttributes = [];
        _this.schemaAddPermission = new intersection_1.Permission();
        _this.schemaReplacePermission = new intersection_1.Permission();
        _this.metadata = null;
        _this.superType = null;
        _this._validationCode = null;
        return _this;
    }
    Object.defineProperty(ManagedType.prototype, "validationCode", {
        /**
         * @type Function
         */
        get: function () {
            return this._validationCode;
        },
        /**
         * @param code
         */
        set: function (code) {
            this._validationCode = code;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ManagedType.prototype, "typeConstructor", {
        /**
         * The Managed class
         */
        get: function () {
            if (!this._typeConstructor) {
                this.typeConstructor = this.createProxyClass();
            }
            return this._typeConstructor;
        },
        /**
         * The Managed class constructor
         * @param typeConstructor The managed class constructor
         */
        set: function (typeConstructor) {
            if (this._typeConstructor) {
                throw new Error('Type constructor has already been set.');
            }
            var isEntity = typeConstructor.prototype instanceof binding_1.Entity;
            if (this.isEntity) {
                if (!isEntity) {
                    throw new TypeError('Entity classes must extends the Entity class.');
                }
            }
            else if (!(typeConstructor.prototype instanceof binding_1.Managed) || isEntity) {
                throw new TypeError('Embeddable classes must extends the Managed class.');
            }
            this.enhancer.enhance(this, typeConstructor);
            this._typeConstructor = typeConstructor;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Initialize this type
     * @param enhancer The class enhancer used to instantiate an instance of this managed class
     */
    ManagedType.prototype.init = function (enhancer) {
        this.enhancer = enhancer;
        if (this._typeConstructor && !binding_1.Enhancer.getIdentifier(this._typeConstructor)) {
            binding_1.Enhancer.setIdentifier(this._typeConstructor, this.ref);
        }
    };
    /**
     * Creates a new instance of the managed type, without invoking any constructors
     *
     * This method is used to create object instances which are loaded form the backend.
     *
     * @return The created instance
     */
    ManagedType.prototype.create = function () {
        var instance = Object.create(this.typeConstructor.prototype);
        binding_1.Managed.init(instance);
        return instance;
    };
    /**
     * An iterator which returns all attributes declared by this type and inherited form all super types
     * @return
     */
    ManagedType.prototype.attributes = function () {
        var _a;
        var iter;
        var index = 0;
        var type = this;
        if (this.superType) {
            iter = this.superType.attributes();
        }
        return _a = {},
            _a[Symbol.iterator] = function () {
                return this;
            },
            _a.next = function () {
                if (iter) {
                    var item = iter.next();
                    if (!item.done) {
                        return item;
                    }
                    iter = null;
                }
                if (index < type.declaredAttributes.length) {
                    var value = type.declaredAttributes[index];
                    index += 1;
                    return { value: value, done: false };
                }
                return { done: true, value: undefined };
            },
            _a;
    };
    /**
     * Adds an attribute to this type
     * @param attr The attribute to add
     * @param order Position of the attribute
     * @return
     */
    ManagedType.prototype.addAttribute = function (attr, order) {
        if (this.getAttribute(attr.name)) {
            throw new Error("An attribute with the name " + attr.name + " is already declared.");
        }
        var initOrder;
        if (!attr.order) {
            initOrder = typeof order === 'undefined' ? this.declaredAttributes.length : order;
        }
        else {
            initOrder = attr.order;
        }
        attr.init(this, initOrder);
        this.declaredAttributes.push(attr);
        if (this._typeConstructor && this.name !== 'Object') {
            this.enhancer.enhanceProperty(this._typeConstructor, attr);
        }
    };
    /**
     * Removes an attribute from this type
     * @param name The Name of the attribute which will be removed
     * @return
     */
    ManagedType.prototype.removeAttribute = function (name) {
        var length = this.declaredAttributes.length;
        this.declaredAttributes = this.declaredAttributes.filter(function (val) { return val.name !== name; });
        if (length === this.declaredAttributes.length) {
            throw new Error("An Attribute with the name " + name + " is not declared.");
        }
    };
    /**
     * @param name
     * @return
     */
    ManagedType.prototype.getAttribute = function (name) {
        var attr = this.getDeclaredAttribute(name);
        if (!attr && this.superType) {
            attr = this.superType.getAttribute(name);
        }
        return attr;
    };
    /**
     * @param val Name or order of the attribute
     * @return
     */
    ManagedType.prototype.getDeclaredAttribute = function (val) {
        return this.declaredAttributes.filter(function (attr) { return attr.name === val || attr.order === val; })[0] || null;
    };
    /**
     * @inheritDoc
     */
    ManagedType.prototype.fromJsonValue = function (state, jsonObject, currentObject, options) {
        if (!jsonObject || !currentObject) {
            return null;
        }
        var iter = this.attributes();
        for (var el = iter.next(); !el.done; el = iter.next()) {
            var attribute = el.value;
            if (!options.onlyMetadata || attribute.isMetadata) {
                attribute.setJsonValue(state, currentObject, jsonObject[attribute.name], options);
            }
        }
        return currentObject;
    };
    /**
     * @inheritDoc
     */
    ManagedType.prototype.toJsonValue = function (state, object, options) {
        if (!(object instanceof this.typeConstructor)) {
            return null;
        }
        var value = {};
        var iter = this.attributes();
        for (var el = iter.next(); !el.done; el = iter.next()) {
            var attribute = el.value;
            if (!options.excludeMetadata || !attribute.isMetadata) {
                value[attribute.name] = attribute.getJsonValue(state, object, options);
            }
        }
        return value;
    };
    /**
     * Converts ths type schema to json
     * @return
     */
    ManagedType.prototype.toJSON = function () {
        var fields = {};
        this.declaredAttributes.forEach(function (attribute) {
            if (!attribute.isMetadata) {
                fields[attribute.name] = attribute;
            }
        });
        return __assign(__assign(__assign({ class: this.ref, fields: fields, acl: {
                schemaAdd: this.schemaAddPermission.toJSON(),
                schemaReplace: this.schemaReplacePermission.toJSON(),
            } }, (this.superType && { superClass: this.superType.ref })), (this.isEmbeddable && { embedded: true })), (this.metadata && { metadata: this.metadata }));
    };
    /**
     * Returns iterator to get all referenced entities
     * @return
     */
    ManagedType.prototype.references = function () {
        var _a;
        var attributes = this.attributes();
        var attribute;
        var embeddedAttributes;
        return _a = {},
            _a[Symbol.iterator] = function () {
                return this;
            },
            _a.next = function () {
                for (;;) {
                    if (embeddedAttributes) {
                        var item_1 = embeddedAttributes.next();
                        if (!item_1.done) {
                            return { value: { path: [attribute.name].concat(item_1.value.path) } };
                        }
                        embeddedAttributes = null;
                    }
                    var item = attributes.next();
                    if (item.done) {
                        // currently TS requires a undefined value here https://github.com/microsoft/TypeScript/issues/38479
                        return { done: true, value: undefined };
                    }
                    attribute = item.value;
                    var type = attribute.isCollection
                        ? attribute.elementType
                        : attribute.type;
                    if (type.isEntity) {
                        return { value: { path: [attribute.name] } };
                    }
                    if (type.isEmbeddable) {
                        embeddedAttributes = type.references();
                    }
                }
            },
            _a;
    };
    /**
     * Retrieves whether this type has specific metadata
     *
     * @param key
     * @return
     */
    ManagedType.prototype.hasMetadata = function (key) {
        return !!this.metadata && !!this.metadata[key];
    };
    /**
     * Gets some metadata of this type
     *
     * @param key
     * @return
     */
    ManagedType.prototype.getMetadata = function (key) {
        if (!this.hasMetadata(key)) {
            return null;
        }
        return this.metadata[key];
    };
    return ManagedType;
}(Type_1.Type));
exports.ManagedType = ManagedType;
//# sourceMappingURL=data:application/json;base64,