"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluralAttribute = exports.CollectionType = void 0;
var Attribute_1 = require("./Attribute");
var CollectionType;
(function (CollectionType) {
    CollectionType[CollectionType["COLLECTION"] = 0] = "COLLECTION";
    CollectionType[CollectionType["LIST"] = 1] = "LIST";
    CollectionType[CollectionType["MAP"] = 2] = "MAP";
    CollectionType[CollectionType["SET"] = 3] = "SET";
})(CollectionType = exports.CollectionType || (exports.CollectionType = {}));
var PluralAttribute = /** @class */ (function (_super) {
    __extends(PluralAttribute, _super);
    /**
     * @param name - The attribute name
     * @param typeConstructor - The collection constructor of the attribute
     * @param elementType - The type of the elements of the attribute collection
     */
    function PluralAttribute(name, typeConstructor, elementType) {
        var _this = _super.call(this, name) || this;
        _this.elementType = elementType;
        _this.typeConstructor = typeConstructor;
        return _this;
    }
    Object.defineProperty(PluralAttribute.prototype, "persistentAttributeType", {
        /**
         * @inheritDoc
         */
        get: function () {
            return Attribute_1.PersistentAttributeType.ELEMENT_COLLECTION;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves a serialized string value of the given json which can be used as object keys
     * @param json The json of which the key should be retrieved
     * @return A serialized version of the json
     */
    PluralAttribute.prototype.keyValue = function (json) {
        if (json && typeof json === 'object' && 'id' in json) {
            return String(json.id);
        }
        return String(json);
    };
    PluralAttribute.CollectionType = CollectionType;
    return PluralAttribute;
}(Attribute_1.Attribute));
exports.PluralAttribute = PluralAttribute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGx1cmFsQXR0cmlidXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21ldGFtb2RlbC9QbHVyYWxBdHRyaWJ1dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLHlDQUFpRTtBQUVqRSxJQUFZLGNBS1g7QUFMRCxXQUFZLGNBQWM7SUFDeEIsK0RBQWMsQ0FBQTtJQUNkLG1EQUFRLENBQUE7SUFDUixpREFBTyxDQUFBO0lBQ1AsaURBQU8sQ0FBQTtBQUNULENBQUMsRUFMVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQUt6QjtBQUVEO0lBQW9ELG1DQUFZO0lBbUI5RDs7OztPQUlHO0lBQ0gseUJBQXNCLElBQVksRUFBRSxlQUF5QixFQUFFLFdBQW9CO1FBQW5GLFlBQ0Usa0JBQU0sSUFBSSxDQUFDLFNBR1o7UUFGQyxLQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixLQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQzs7SUFDekMsQ0FBQztJQWJELHNCQUFJLG9EQUF1QjtRQUgzQjs7V0FFRzthQUNIO1lBQ0UsT0FBTyxtQ0FBdUIsQ0FBQyxrQkFBa0IsQ0FBQztRQUNwRCxDQUFDOzs7T0FBQTtJQWFEOzs7O09BSUc7SUFDTyxrQ0FBUSxHQUFsQixVQUFtQixJQUFVO1FBQzNCLElBQUksSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ3BELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN4QjtRQUVELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUF4Q3NCLDhCQUFjLEdBQUcsY0FBYyxDQUFDO0lBeUN6RCxzQkFBQztDQUFBLEFBMUNELENBQW9ELHFCQUFTLEdBMEM1RDtBQTFDcUIsMENBQWUifQ==