"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartialUpdateBuilder = void 0;
var UpdateOperation_1 = require("./UpdateOperation");
var ALLOWED_OPERATIONS = [
    '$add',
    '$and',
    '$currentDate',
    '$dec',
    '$inc',
    '$max',
    '$min',
    '$mul',
    '$or',
    '$pop',
    '$push',
    '$put',
    '$remove',
    '$rename',
    '$replace',
    '$set',
    '$shift',
    '$unshift',
    '$xor',
];
var PartialUpdateBuilder = /** @class */ (function () {
    /**
     * @param operations
     */
    function PartialUpdateBuilder(operations) {
        this.operations = [];
        if (operations) {
            this.addOperations(operations);
        }
    }
    /**
     * Sets a field to a given value
     *
     * @param field The field to set
     * @param value The value to set to
     * @return
     */
    PartialUpdateBuilder.prototype.set = function (field, value) {
        var val = value;
        if (val instanceof Set) {
            val = Array.from(val);
        }
        else if (val instanceof Map) {
            var newValue_1 = {};
            val.forEach(function (v, k) {
                newValue_1[k] = v;
            });
            val = newValue_1;
        }
        return this.addOperation(field, '$set', val);
    };
    /**
     * Increments a field by a given value
     *
     * @param field The field to increment
     * @param by The number to increment by, defaults to 1
     * @return
     */
    PartialUpdateBuilder.prototype.inc = function (field, by) {
        return this.addOperation(field, '$inc', typeof by === 'number' ? by : 1);
    };
    /**
     * Decrements a field by a given value
     *
     * @param field The field to decrement
     * @param by The number to decrement by, defaults to 1
     * @return
     */
    PartialUpdateBuilder.prototype.dec = function (field, by) {
        return this.inc(field, typeof by === 'number' ? -by : -1);
    };
    /**
     * Multiplies a field by a given number
     *
     * @param field The field to multiply
     * @param multiplicator The number to multiply by
     * @return
     */
    PartialUpdateBuilder.prototype.mul = function (field, multiplicator) {
        if (typeof multiplicator !== 'number') {
            throw new Error('Multiplicator must be a number.');
        }
        return this.addOperation(field, '$mul', multiplicator);
    };
    /**
     * Divides a field by a given number
     *
     * @param field The field to divide
     * @param divisor The number to divide by
     * @return
     */
    PartialUpdateBuilder.prototype.div = function (field, divisor) {
        if (typeof divisor !== 'number') {
            throw new Error('Divisor must be a number.');
        }
        return this.addOperation(field, '$mul', 1 / divisor);
    };
    /**
     * Sets the highest possible value of a field
     *
     * @param field The field to compare with
     * @param value The highest possible value
     * @return
     */
    PartialUpdateBuilder.prototype.min = function (field, value) {
        if (typeof value !== 'number') {
            throw new Error('Value must be a number');
        }
        return this.addOperation(field, '$min', value);
    };
    /**
     * Sets the smallest possible value of a field
     *
     * @param field The field to compare with
     * @param value The smalles possible value
     * @return
     */
    PartialUpdateBuilder.prototype.max = function (field, value) {
        if (typeof value !== 'number') {
            throw new Error('Value must be a number');
        }
        return this.addOperation(field, '$max', value);
    };
    /**
     * Removes an item from an array or map
     *
     * @param field The field to perform the operation on
     * @param item The item to add
     * @return
     */
    PartialUpdateBuilder.prototype.remove = function (field, item) {
        return this.addOperation(field, '$remove', item);
    };
    /**
     * Puts an item from an array or map
     *
     * @param field The field to perform the operation on
     * @param key The map key to put the value to or an object of arguments
     * @param [value] The value to put if a key was used
     * @return
     */
    PartialUpdateBuilder.prototype.put = function (field, key, value) {
        var obj = {};
        if (typeof key === 'string' || typeof key === 'number') {
            obj[key] = value;
        }
        else if (typeof key === 'object') {
            Object.assign(obj, key);
        }
        return this.addOperation(field, '$put', obj);
    };
    /**
     * Pushes an item into a list
     *
     * @param field The field to perform the operation on
     * @param item The item to add
     * @return
     */
    PartialUpdateBuilder.prototype.push = function (field, item) {
        return this.addOperation(field, '$push', item);
    };
    /**
     * Unshifts an item into a list
     *
     * @param field The field to perform the operation on
     * @param item The item to add
     * @return
     */
    PartialUpdateBuilder.prototype.unshift = function (field, item) {
        return this.addOperation(field, '$unshift', item);
    };
    /**
     * Pops the last item out of a list
     *
     * @param field The field to perform the operation on
     * @return
     */
    PartialUpdateBuilder.prototype.pop = function (field) {
        return this.addOperation(field, '$pop');
    };
    /**
     * Shifts the first item out of a list
     *
     * @param field The field to perform the operation on
     * @return
     */
    PartialUpdateBuilder.prototype.shift = function (field) {
        return this.addOperation(field, '$shift');
    };
    /**
     * Adds an item to a set
     *
     * @param field The field to perform the operation on
     * @param item The item to add
     * @return
     */
    PartialUpdateBuilder.prototype.add = function (field, item) {
        return this.addOperation(field, '$add', item);
    };
    /**
     * Replaces an item at a given index
     *
     * @param path The path to perform the operation on
     * @param index The index where the item will be replaced
     * @param item The item to replace with
     * @return
     */
    PartialUpdateBuilder.prototype.replace = function (path, index, item) {
        if (this.hasOperationOnPath(path)) {
            throw new Error("You cannot update " + path + " multiple times");
        }
        return this.addOperation(path + "." + index, '$replace', item);
    };
    /**
     * Sets a datetime field to the current moment
     *
     * @param field The field to perform the operation on
     * @return
     */
    PartialUpdateBuilder.prototype.currentDate = function (field) {
        return this.addOperation(field, '$currentDate');
    };
    /**
     * Performs a bitwise AND on a path
     *
     * @param path The path to perform the operation on
     * @param bitmask The bitmask taking part in the operation
     * @return
     */
    PartialUpdateBuilder.prototype.and = function (path, bitmask) {
        return this.addOperation(path, '$and', bitmask);
    };
    /**
     * Performs a bitwise OR on a path
     *
     * @param path The path to perform the operation on
     * @param bitmask The bitmask taking part in the operation
     * @return
     */
    PartialUpdateBuilder.prototype.or = function (path, bitmask) {
        return this.addOperation(path, '$or', bitmask);
    };
    /**
     * Performs a bitwise XOR on a path
     *
     * @param path The path to perform the operation on
     * @param bitmask The bitmask taking part in the operation
     * @return
     */
    PartialUpdateBuilder.prototype.xor = function (path, bitmask) {
        return this.addOperation(path, '$xor', bitmask);
    };
    /**
     * Renames a field
     *
     * @param oldPath The old field name
     * @param newPath The new field name
     * @return
     */
    PartialUpdateBuilder.prototype.rename = function (oldPath, newPath) {
        return this.addOperation(oldPath, '$rename', newPath);
    };
    /**
     * Returns a JSON representation of this partial update
     *
     * @return
     */
    PartialUpdateBuilder.prototype.toJSON = function () {
        return this.operations.reduce(function (json, operation) {
            var _a, _b;
            return (__assign(__assign({}, json), (_a = {}, _a[operation.name] = __assign(__assign({}, json[operation.name]), (_b = {}, _b[operation.path] = operation.value, _b)), _a)));
        }, {});
    };
    /**
     * Executes the partial update
     *
     * @return The promise resolves when the partial update has been executed successfully
     * @abstract
     */
    PartialUpdateBuilder.prototype.execute = function () {
        throw new Error('Cannot call "execute" on abstract PartialUpdateBuilder');
    };
    /**
     * Adds an update operation on the partial update
     *
     * @param path The path which gets modified by the operation
     * @param operator The operator of the operation to add
     * @param [value] The value used to execute the operation
     * @return
     * @private
     */
    PartialUpdateBuilder.prototype.addOperation = function (path, operator, value) {
        if (typeof path !== 'string') {
            throw new Error('Path must be a string');
        }
        if (ALLOWED_OPERATIONS.indexOf(operator) === -1) {
            throw new Error("Operation invalid: " + operator);
        }
        if (this.hasOperationOnPath(path)) {
            throw new Error("You cannot update " + path + " multiple times");
        }
        // Check for illegal values
        if (typeof value === 'number') {
            if (Number.isNaN(value)) {
                throw new Error('NaN is not a supported value');
            }
            if (!Number.isFinite(value)) {
                throw new Error('Infinity is not a supported value');
            }
        }
        // Add the new operation
        var normalizedValue = typeof value === 'undefined' ? null : value;
        var updateOperation = new UpdateOperation_1.UpdateOperation(operator, path, normalizedValue);
        this.operations.push(updateOperation);
        return this;
    };
    /**
     * Adds initial operations
     *
     * @param json
     * @private
     */
    PartialUpdateBuilder.prototype.addOperations = function (json) {
        var _this = this;
        Object.keys(json).forEach(function (key) {
            var pathValueDictionary = json[key];
            Object.keys(pathValueDictionary).forEach(function (path) {
                var value = pathValueDictionary[path];
                _this.operations.push(new UpdateOperation_1.UpdateOperation(key, path, value));
            });
        });
    };
    /**
     * Checks whether an operation on the field exists already
     *
     * @param path The path where the operation is executed on
     * @return True, if the operation does exist
     * @private
     */
    PartialUpdateBuilder.prototype.hasOperationOnPath = function (path) {
        return this.operations.some(function (op) { return op.path === path; });
    };
    return PartialUpdateBuilder;
}());
exports.PartialUpdateBuilder = PartialUpdateBuilder;
// aliases
Object.assign(PartialUpdateBuilder.prototype, {
    increment: PartialUpdateBuilder.prototype.inc,
    decrement: PartialUpdateBuilder.prototype.dec,
    multiply: PartialUpdateBuilder.prototype.mul,
    divide: PartialUpdateBuilder.prototype.div,
    atMost: PartialUpdateBuilder.prototype.min,
    atLeast: PartialUpdateBuilder.prototype.max,
    toNow: PartialUpdateBuilder.prototype.currentDate,
});
//# sourceMappingURL=data:application/json;base64,