"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = void 0;
var binding_1 = require("../binding");
var Query_1 = require("./Query");
var message = __importStar(require("../message"));
var intersection_1 = require("../intersection");
var Stream_1 = require("./Stream");
/**
 * A Query Node saves the state of the query being built
 */
var Node = /** @class */ (function (_super) {
    __extends(Node, _super);
    function Node() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * The offset how many results should be skipped
         */
        _this.firstResult = 0;
        /**
         * The limit how many objects should be returned
         * @type number
         * @readonly
         */
        _this.maxResults = -1;
        /**
         * The properties which should be used sort the result
         */
        _this.order = {};
        return _this;
    }
    Node.prototype.eventStream = function (options, onNext, onError, onComplete) {
        if (options instanceof Function) {
            return this.eventStream({}, options, onNext, onError);
        }
        var observable = Stream_1.Stream.createEventStream(this.entityManager, this.createRealTimeQuery(), options);
        if (onNext instanceof Function) {
            return observable.subscribe(onNext, onError, onComplete);
        }
        return observable;
    };
    Node.prototype.resultStream = function (options, onNext, onError, onComplete) {
        if (options instanceof Function) {
            return this.resultStream({}, options, onNext, onError);
        }
        var observable = Stream_1.Stream.createResultStream(this.entityManager, this.createRealTimeQuery(), options);
        if (onNext instanceof Function) {
            return observable.subscribe(onNext, onError, onComplete);
        }
        return observable;
    };
    /**
     * @inheritDoc
     */
    Node.prototype.resultList = function (options, doneCallback, failCallback) {
        var _this = this;
        var _a;
        if (options instanceof Function) {
            return this.resultList({}, options, doneCallback);
        }
        var type = this.resultClass ? this.entityManager.metamodel.entity(this.resultClass) : null;
        if (!type) {
            throw new Error('Only typed queries can be executed.');
        }
        var query = this.serializeQuery();
        var sort = this.serializeSort();
        var uriSize = (((_a = this.entityManager.connection) === null || _a === void 0 ? void 0 : _a.host.length) || 0) + query.length + sort.length;
        var msg;
        if (uriSize > Query_1.Query.MAX_URI_SIZE) {
            msg = new message.AdhocQueryPOST(type.name, this.firstResult, this.maxResults, sort)
                .entity(query, 'text');
        }
        else {
            msg = new message.AdhocQuery(type.name, query, this.firstResult, this.maxResults, sort);
        }
        return this.entityManager.send(msg)
            .then(function (response) { return _this.createResultList(response.entity, options); })
            .then(doneCallback, failCallback);
    };
    /**
     * @inheritDoc
     */
    Node.prototype.singleResult = function (options, doneCallback, failCallback) {
        var _this = this;
        var _a;
        if (options instanceof Function) {
            return this.singleResult({}, options, doneCallback);
        }
        var type = this.resultClass ? this.entityManager.metamodel.entity(this.resultClass) : null;
        if (!type) {
            throw new Error('Only typed queries can be executed.');
        }
        var query = this.serializeQuery();
        var sort = this.serializeSort();
        var uriSize = (((_a = this.entityManager.connection) === null || _a === void 0 ? void 0 : _a.host.length) || 0) + query.length;
        var msg;
        if (uriSize > Query_1.Query.MAX_URI_SIZE) {
            msg = new message.AdhocQueryPOST(type.name, this.firstResult, 1, sort)
                .entity(query, 'text');
        }
        else {
            msg = new message.AdhocQuery(type.name, query, this.firstResult, 1, sort);
        }
        return this.entityManager.send(msg)
            .then(function (response) { return _this.createResultList(response.entity, options); })
            .then(function (list) { return (list.length ? list[0] : null); })
            .then(doneCallback, failCallback);
    };
    /**
     * @inheritDoc
     */
    Node.prototype.count = function (doneCallback, failCallback) {
        var _a;
        var type = this.resultClass ? this.entityManager.metamodel.entity(this.resultClass) : null;
        if (!type) {
            throw new Error('Only typed queries can be executed.');
        }
        var query = this.serializeQuery();
        var uriSize = (((_a = this.entityManager.connection) === null || _a === void 0 ? void 0 : _a.host.length) || 0) + query.length;
        var msg;
        if (uriSize > Query_1.Query.MAX_URI_SIZE) {
            msg = new message.AdhocCountQueryPOST(type.name)
                .entity(query, 'text');
        }
        else {
            msg = new message.AdhocCountQuery(type.name, query);
        }
        return this.entityManager.send(msg)
            .then(function (response) { return response.entity.count; })
            .then(doneCallback, failCallback);
    };
    Node.prototype.serializeQuery = function () {
        return JSON.stringify(this, function argSerializer(k, v) {
            // this referees here to the object which owns the key k
            var typedValue = this[k];
            if (typedValue instanceof Date) {
                return { $date: v };
            }
            if (typedValue instanceof binding_1.Entity) {
                return typedValue.id;
            }
            return v;
        });
    };
    Node.prototype.serializeSort = function () {
        return JSON.stringify(this.order);
    };
    Node.prototype.createResultList = function (result, options) {
        var _this = this;
        if (result.length) {
            return Promise.all(result.map(function (el) {
                if (el.id) {
                    var entity = _this.entityManager.getReference(_this.resultClass, el.id);
                    var metadata = intersection_1.Metadata.get(entity);
                    metadata.type.fromJsonValue(metadata, el, entity, { persisting: true });
                    return _this.entityManager.resolveDepth(entity, options);
                }
                return _this.entityManager.load(Object.keys(el)[0]);
            }))
                .then(function (objects) { return objects.filter(function (val) { return !!val; }); });
        }
        return Promise.resolve([]);
    };
    Node.prototype.createRealTimeQuery = function () {
        var type = this.resultClass ? this.entityManager.metamodel.entity(this.resultClass) : null;
        if (!type) {
            throw new Error('Only typed queries can be executed.');
        }
        var query = {
            bucket: type.name,
            query: this.serializeQuery(),
        };
        var sort = this.serializeSort();
        if (sort && sort !== '{}') {
            query.sort = sort;
        }
        if (this.maxResults > 0) {
            query.limit = this.maxResults;
        }
        if (this.firstResult > 0) {
            query.offset = this.firstResult;
        }
        return query;
    };
    Node.prototype.addOrder = function (fieldOrSort, order) {
        if (typeof fieldOrSort === 'string') {
            this.order[fieldOrSort] = order;
        }
        else {
            this.order = fieldOrSort;
        }
        return this;
    };
    Node.prototype.addOffset = function (offset) {
        this.firstResult = offset;
        return this;
    };
    Node.prototype.addLimit = function (limit) {
        this.maxResults = limit;
        return this;
    };
    return Node;
}(Query_1.Query));
exports.Node = Node;
//# sourceMappingURL=data:application/json;base64,