"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Factory = void 0;
// @ts-ignore
var Factory = /** @class */ (function () {
    function Factory() {
        this.type = null;
        this.prototype = null;
    }
    Factory.extend = function (target, proto) {
        if (proto !== Factory.prototype) {
            this.extend(target, Object.getPrototypeOf(proto));
        }
        var properties = Object.getOwnPropertyNames(proto);
        for (var j = 0, len = properties.length; j < len; j += 1) {
            var prop = properties[j];
            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(proto, prop));
        }
        return target;
    };
    /**
     * Creates a new Factory for the given type
     * @param type - the type constructor of T
     * @return A new object factory to created instances of T
     */
    Factory.createFactory = function (type) {
        // We want te explicitly name the created factory and give the constructor a properly argument name
        var factory = Factory.extend((function FactoryConstructor() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return factory.newInstance(args);
        }), this.prototype);
        // lets instanceof work properly
        factory.prototype = type.prototype;
        factory.type = type;
        return factory;
    };
    /**
     * Creates a new instance of the factory type
     * @param args Constructor arguments used for instantiation
     * @return A new created instance of *
     * @instance
     */
    Factory.prototype.new = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.newInstance(args);
    };
    /**
     * Creates a new instance of the factory type
     * @param args Constructor arguments used for instantiation
     * @return A new created instance of *
     * @instance
     */
    Factory.prototype.newInstance = function (args) {
        if (!args || args.length === 0) {
            // eslint-disable-next-line new-cap
            return new this.type();
        }
        // es6 constructors can't be called, therefore bind all arguments and invoke the constructor
        // then with the bounded parameters
        // The first argument is shift out by invocation with `new`.
        var a = [null];
        Array.prototype.push.apply(a, args);
        var boundConstructor = (Function.prototype.bind.apply(this.type, a));
        // eslint-disable-next-line new-cap
        return new boundConstructor();
    };
    return Factory;
}());
exports.Factory = Factory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9iaW5kaW5nL0ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBZ0JBLGFBQWE7QUFDYjtJQUFBO1FBaUNTLFNBQUksR0FBYSxJQUFXLENBQUM7UUFFN0IsY0FBUyxHQUFNLElBQVcsQ0FBQztJQWlDcEMsQ0FBQztJQW5FZ0IsY0FBTSxHQUFyQixVQUFpRCxNQUFTLEVBQUUsS0FBUTtRQUNsRSxJQUFJLEtBQUssS0FBSyxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNuRDtRQUVELElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEQsSUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsd0JBQXdCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBRSxDQUFDLENBQUM7U0FDcEY7UUFFRCxPQUFPLE1BQWUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNjLHFCQUFhLEdBQTlCLFVBQXdFLElBQWM7UUFDcEYsbUdBQW1HO1FBQ25HLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLGtCQUFrQjtZQUFDLGNBQWM7aUJBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztnQkFBZCx5QkFBYzs7WUFDeEUsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBYSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVoQyxnQ0FBZ0M7UUFDaEMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRXBCLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFNRDs7Ozs7T0FLRztJQUNILHFCQUFHLEdBQUg7UUFBSSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsNkJBQVcsR0FBWCxVQUFZLElBQXlCO1FBQ25DLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDOUIsbUNBQW1DO1lBQ25DLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSyxFQUFFLENBQUM7U0FDekI7UUFFRCw0RkFBNEY7UUFDNUYsbUNBQW1DO1FBQ25DLDREQUE0RDtRQUM1RCxJQUFNLENBQUMsR0FBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBYSxDQUFDLENBQUM7UUFDN0MsSUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEUsbUNBQW1DO1FBQ25DLE9BQU8sSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFDSCxjQUFDO0FBQUQsQ0FBQyxBQXBFRCxJQW9FQztBQXBFWSwwQkFBTyJ9