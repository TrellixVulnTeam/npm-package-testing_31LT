const FallBachValLib = {};
let valLib = FallBachValLib;
try {
    // we load this module as an optional external dependency
    // eslint-disable-next-line global-require
    valLib = require('validator');
}
catch (e) {
    // ignore loading optional module error
}
export class Validator {
    constructor(key, entity) {
        /**
         * The cached errors of the validation
         */
        this.errors = [];
        this.key = key;
        this.entity = entity;
    }
    /**
     * Compiles the given validation code for the managedType
     * @param managedType The managedType of the code
     * @param validationCode The validation code
     * @return the parsed validation function
     */
    static compile(managedType, validationCode) {
        const keys = [];
        const iter = managedType.attributes();
        for (let el = iter.next(); !el.done; el = iter.next()) {
            const attr = el.value;
            keys.push(attr.name);
        }
        // eslint-disable-next-line @typescript-eslint/no-implied-eval,no-new-func
        const fn = new Function(...keys, validationCode);
        return function onValidate(argObj) {
            if (valLib === FallBachValLib) {
                throw new Error('Validation code will not be executed. Make sure that the validator package is correctly provided as an external dependency.');
            }
            const args = keys.map((name) => argObj[name]);
            return fn.apply({}, args);
        };
    }
    /**
     * Gets the value of the attribute
     * @return Value
     */
    get value() {
        return this.entity[this.key];
    }
    /**
     * Checks if the attribute is valid
     * @return
     */
    get isValid() {
        return this.errors.length === 0;
    }
    is(error, fn) {
        if (error instanceof Function) {
            return this.is('is', error);
        }
        if (fn(this.value, valLib) === false) {
            this.errors.push(error);
        }
        return this;
    }
    callMethod(method, errorMessage, argumentList) {
        const args = argumentList || [];
        try {
            args.unshift(this.toStringValue());
            if (valLib[method].apply(this, args) === false) {
                this.errors.push(errorMessage || method);
            }
        }
        catch (e) {
            this.errors.push(errorMessage || e.message);
        }
        return this;
    }
    toStringValue() {
        const { value } = this;
        if (typeof value === 'string' || value instanceof Date) {
            return value;
        }
        return JSON.stringify(value);
    }
    toJSON() {
        return {
            isValid: this.isValid,
            errors: this.errors,
        };
    }
}
const OTHER_VALIDATORS = ['contains', 'equals', 'matches'];
Object.keys(valLib).forEach((name) => {
    if (name.startsWith('is') || OTHER_VALIDATORS.includes(name)) {
        // use function here to keep the correct this context
        Validator.prototype[name] = function validate(...args) {
            const error = typeof args[0] === 'string' ? args.shift() : null;
            return this.callMethod(name, error, args);
        };
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2ludGVyc2VjdGlvbi9WYWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzFCLElBQUksTUFBTSxHQUE4QixjQUFjLENBQUM7QUFDdkQsSUFBSTtJQUNGLHlEQUF5RDtJQUN6RCwwQ0FBMEM7SUFDMUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUMvQjtBQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQ1YsdUNBQXVDO0NBQ3hDO0FBU0QsTUFBTSxPQUFPLFNBQVM7SUErRnBCLFlBQVksR0FBVyxFQUFFLE1BQWM7UUFwRXZDOztXQUVHO1FBQ0ssV0FBTSxHQUFhLEVBQUUsQ0FBQztRQWtFNUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBakdEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUE2QixFQUFFLGNBQXNCO1FBQ2xFLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztRQUMxQixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEMsS0FBSyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDckQsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0QjtRQUVELDBFQUEwRTtRQUMxRSxNQUFNLEVBQUUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztR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