/**
 * This base class provides an lock interface to execute exclusive operations
 */
export class Lockable {
    constructor() {
        /**
         * Indicates if there is currently an onging exclusive operation
         * @type boolean
         * @private
         */
        this.isLocked = false;
        /**
         * A promise which represents the state of the least exclusive operation
         * @type Promise
         * @private
         */
        this.readyPromise = Promise.resolve(this);
    }
    /**
     * Indicates if there is currently no exclusive operation executed
     * <code>true</code> If no exclusive lock is hold
     */
    get isReady() {
        return !this.isLocked;
    }
    /**
     * Waits on the previously requested operation and calls the doneCallback if the operation is fulfilled
     * @param doneCallback The callback which will be invoked when the previously
     * operations on this object is completed.
     * @param failCallback When the lock can't be released caused by a none
     * recoverable error
     * @return A promise which completes successfully, when the previously requested
     * operation completes
     */
    ready(doneCallback, failCallback) {
        return this.readyPromise.then(doneCallback, failCallback);
    }
    /**
     * Try to aquire an exclusive lock and executes the given callback.
     * @param callback The exclusive operation to execute
     * @param [critical=false] Indicates if the operation is critical. If the operation is critical and the
     * operation fails, then the lock will not be released
     * @return A promise
     * @throws If the lock can't be aquired
     * @protected
     */
    withLock(callback, critical = false) {
        if (this.isLocked) {
            throw new Error('Current operation has not been finished.');
        }
        try {
            this.isLocked = true;
            const result = callback().then((res) => {
                this.isLocked = false;
                return res;
            }, (e) => {
                if (!critical) {
                    this.isLocked = false;
                }
                throw e;
            });
            this.readyPromise = result.then(() => this, (e) => {
                if (!critical) {
                    return this;
                }
                throw e;
            });
            return result;
        }
        catch (e) {
            if (critical) {
                this.readyPromise = Promise.reject(e);
            }
            else {
                this.isLocked = false;
            }
            throw e;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9ja2FibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvdXRpbC9Mb2NrYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sT0FBTyxRQUFRO0lBS25CO1FBQ0U7Ozs7V0FJRztRQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRXRCOzs7O1dBSUc7UUFDSCxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksT0FBTztRQUNULE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILEtBQUssQ0FBQyxZQUFrQyxFQUFFLFlBQW9DO1FBQzVFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILFFBQVEsQ0FBSSxRQUEwQixFQUFFLFFBQVEsR0FBRyxLQUFLO1FBQ3RELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDN0Q7UUFFRCxJQUFJO1lBQ0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsTUFBTSxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO2dCQUN0QixPQUFPLEdBQUcsQ0FBQztZQUNiLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNQLElBQUksQ0FBQyxRQUFRLEVBQUU7b0JBQ2IsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7aUJBQ3ZCO2dCQUNELE1BQU0sQ0FBQyxDQUFDO1lBQ1YsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2hELElBQUksQ0FBQyxRQUFRLEVBQUU7b0JBQ2IsT0FBTyxJQUFJLENBQUM7aUJBQ2I7Z0JBQ0QsTUFBTSxDQUFDLENBQUM7WUFDVixDQUFDLENBQUMsQ0FBQztZQUVILE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksUUFBUSxFQUFFO2dCQUNaLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN2QztpQkFBTTtnQkFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQzthQUN2QjtZQUNELE1BQU0sQ0FBQyxDQUFDO1NBQ1Q7SUFDSCxDQUFDO0NBQ0YifQ==