import * as binding from './binding';
import * as connector from './connector';
import * as error from './error';
import * as message from './message';
import * as util from './util';
import * as caching from './caching';
import * as query from './query';
import * as partialupdate from './partialupdate';
import * as intersection from './intersection';
import * as metamodel from './metamodel';
import { Permission, Metadata, TokenStorage, Validator, PushMessage, Code, Modules, Logger, } from './intersection';
import { Metamodel } from './metamodel';
import { EntityManagerFactory } from './EntityManagerFactory';
import { EntityManager } from './EntityManager';
import { Acl } from './Acl';
import { db } from './baqend';
import { deprecated } from './util';
function deprecateExports(target, targetName, newImportSignature, exports) {
    Object.keys(exports).forEach((exported) => {
        const decorate = deprecated(newImportSignature.replace('$export', exported));
        Object.defineProperty(target, exported, decorate(targetName, exported, {
            get() {
                return exports[exported];
            },
        }));
    });
}
deprecateExports(util, 'util', 'intersection.$export', {
    Permission, Metadata, TokenStorage, Validator, PushMessage, Code, Modules, Logger,
});
deprecateExports(EntityManager.prototype, 'db', 'import { $export } from \'baqend\'', {
    db,
    binding,
    connector,
    error,
    message,
    util,
    caching,
    query,
    partialupdate,
    intersection,
    EntityManagerFactory,
    EntityManager,
    Acl,
});
deprecateExports(Metamodel.prototype, 'metamodel', 'import { metamodel } from \'baqend\';', metamodel);
export function configure() {
    throw new Error('Please use Baqend.db.configure() or import { db } from \'baqend\' instead.');
}
export function connect() {
    throw new Error('Please use Baqend.db.connect() or import { db } from \'baqend\' instead.');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwZXJlY2F0ZWQtZXhwb3J0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9kZXBlcmVjYXRlZC1leHBvcnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxPQUFPLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sS0FBSyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3pDLE9BQU8sS0FBSyxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBQ2pDLE9BQU8sS0FBSyxPQUFPLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sS0FBSyxJQUFJLE1BQU0sUUFBUSxDQUFDO0FBQy9CLE9BQU8sS0FBSyxPQUFPLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sS0FBSyxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBQ2pDLE9BQU8sS0FBSyxhQUFhLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxLQUFLLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUMvQyxPQUFPLEtBQUssU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUV6QyxPQUFPLEVBQ0wsVUFBVSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sR0FDbEYsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRTVCLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDOUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVwQyxTQUFTLGdCQUFnQixDQUFDLE1BQWMsRUFBRSxVQUFrQixFQUFFLGtCQUEwQixFQUFFLE9BRXpGO0lBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUN4QyxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRTtZQUNyRSxHQUFHO2dCQUNELE9BQVEsT0FBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BDLENBQUM7U0FDRixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELGdCQUFnQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsc0JBQXNCLEVBQUU7SUFDckQsVUFBVSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU07Q0FDbEYsQ0FBQyxDQUFDO0FBRUgsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUU7SUFDcEYsRUFBRTtJQUNGLE9BQU87SUFDUCxTQUFTO0lBQ1QsS0FBSztJQUNMLE9BQU87SUFDUCxJQUFJO0lBQ0osT0FBTztJQUNQLEtBQUs7SUFDTCxhQUFhO0lBQ2IsWUFBWTtJQUVaLG9CQUFvQjtJQUNwQixhQUFhO0lBQ2IsR0FBRztDQUNKLENBQUMsQ0FBQztBQUVILGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLHVDQUF1QyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRXZHLE1BQU0sVUFBVSxTQUFTO0lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEVBQTRFLENBQUMsQ0FBQztBQUNoRyxDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU87SUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0FBQzlGLENBQUMifQ==