/**
 * Creates a new GeoPoint instance
 * From latitude and longitude
 * From a json object
 * Or an tuple of latitude and longitude
 */
export class GeoPoint {
    /**
     * @param latitude A coordinate pair (latitude first),
     * a GeoPoint like object or the GeoPoint's latitude
     * @param longitude The GeoPoint's longitude
     */
    constructor(latitude, longitude) {
        let lat;
        let lng;
        if (typeof latitude === 'string') {
            const index = latitude.indexOf(';');
            lat = Number(latitude.substring(0, index));
            lng = Number(latitude.substring(index + 1));
        }
        else if (Array.isArray(latitude)) {
            [lat, lng] = latitude;
        }
        else if (typeof latitude === 'object') {
            lat = latitude.latitude;
            lng = latitude.longitude;
        }
        else {
            lat = typeof latitude === 'number' ? latitude : 0;
            lng = typeof longitude === 'number' ? longitude : 0;
        }
        this.longitude = lng;
        this.latitude = lat;
        if (this.latitude < -90 || this.latitude > 90) {
            throw new Error(`Latitude ${this.latitude} is not in bound of -90 <= latitude <= 90`);
        }
        if (this.longitude < -180 || this.longitude > 180) {
            throw new Error(`Longitude ${this.longitude} is not in bound of -180 <= longitude <= 180`);
        }
    }
    /**
     * Creates a GeoPoint with the user's current location, if available.
     * @return A promise that will be resolved with a GeoPoint
     */
    static current() {
        return new Promise(((resolve, reject) => {
            if (!navigator) {
                reject(new Error('This seems not to be a browser context.'));
            }
            if (!navigator.geolocation) {
                reject(new Error('This browser does not support geolocation.'));
            }
            navigator.geolocation.getCurrentPosition((location) => {
                resolve(new GeoPoint(location.coords.latitude, location.coords.longitude));
            }, (error) => {
                reject(error);
            });
        }));
    }
    /**
     * Returns the distance from this GeoPoint to another in kilometers.
     * @param point another GeoPoint
     * @return The distance in kilometers
     *
     * @see GeoPoint#radiansTo
     */
    kilometersTo(point) {
        return Number((GeoPoint.EARTH_RADIUS_IN_KILOMETERS * this.radiansTo(point)).toFixed(3));
    }
    /**
     * Returns the distance from this GeoPoint to another in miles.
     * @param point another GeoPoint
     * @return The distance in miles
     *
     * @see GeoPoint#radiansTo
     */
    milesTo(point) {
        return Number((GeoPoint.EARTH_RADIUS_IN_MILES * this.radiansTo(point)).toFixed(3));
    }
    /**
     * Computes the arc, in radian, between two WGS-84 positions.
     *
     * The haversine formula implementation is taken from:
     * {@link http://www.movable-type.co.uk/scripts/latlong.html}
     *
     * Returns the distance from this GeoPoint to another in radians.
     * @param point another GeoPoint
     * @return the arc, in radian, between two WGS-84 positions
     *
     * @see http://en.wikipedia.org/wiki/Haversine_formula
     */
    radiansTo(point) {
        const from = this;
        const to = point;
        const rad1 = from.latitude * GeoPoint.DEG_TO_RAD;
        const rad2 = to.latitude * GeoPoint.DEG_TO_RAD;
        const dLng = (to.longitude - from.longitude) * GeoPoint.DEG_TO_RAD;
        return Math.acos((Math.sin(rad1) * Math.sin(rad2)) + (Math.cos(rad1) * Math.cos(rad2) * Math.cos(dLng)));
    }
    /**
     * A String representation in latitude, longitude format
     * @return The string representation of this class
     */
    toString() {
        return `${this.latitude};${this.longitude}`;
    }
    /**
     * Returns a JSON representation of the GeoPoint
     * @return A GeoJson object of this GeoPoint
     */
    toJSON() {
        return { latitude: this.latitude, longitude: this.longitude };
    }
}
/**
 * How many radians fit in one degree.
 */
GeoPoint.DEG_TO_RAD = Math.PI / 180;
/**
 * The Earth radius in kilometers used by {@link GeoPoint#kilometersTo}
 */
GeoPoint.EARTH_RADIUS_IN_KILOMETERS = 6371;
/**
 * The Earth radius in miles used by {@link GeoPoint#milesTo}
 */
GeoPoint.EARTH_RADIUS_IN_MILES = 3956;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2VvUG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvR2VvUG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sUUFBUTtJQStDbkI7Ozs7T0FJRztJQUNILFlBQVksUUFBdUYsRUFDakcsU0FBa0I7UUFDbEIsSUFBSSxHQUFXLENBQUM7UUFDaEIsSUFBSSxHQUFXLENBQUM7UUFDaEIsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDaEMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQyxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDM0MsR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdDO2FBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2xDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztTQUN2QjthQUFNLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ3ZDLEdBQUcsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQ3hCLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO1NBQzFCO2FBQU07WUFDTCxHQUFHLEdBQUcsT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRCxHQUFHLEdBQUcsT0FBTyxTQUFTLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyRDtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBQ3JC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