import * as message from '../message';
import { PushMessage } from '../intersection';
import { EntityFactory } from './EntityFactory';
export class DeviceFactory extends EntityFactory {
    /**
     * Push message will be used to send a push notification to a set of devices
     */
    get PushMessage() {
        return PushMessage;
    }
    /**
     * The current registered device, or <code>null</code> if the device is not registered
     * @type model.Device
     */
    get me() {
        return this.db.deviceMe;
    }
    /**
     * Returns true if the devices is already registered, otherwise false.
     * @type boolean
     */
    get isRegistered() {
        return this.db.isDeviceRegistered;
    }
    /**
     * Loads the Public VAPID Key which can be used to subscribe a Browser for Web Push notifications
     * @return The public VAPID Web Push subscription key
     */
    loadWebPushKey() {
        const msg = new message.VAPIDPublicKey();
        msg.responseType('arraybuffer');
        return this.db.send(msg).then((response) => response.entity);
    }
    register(os, tokenOrSubscription, device, doneCallback, failCallback) {
        if (device instanceof Function) {
            return this.register(os, tokenOrSubscription, null, device, doneCallback);
        }
        const subscription = typeof tokenOrSubscription === 'string' ? { token: tokenOrSubscription } : tokenOrSubscription;
        return this.db.registerDevice(os, subscription, device).then(doneCallback, failCallback);
    }
    /**
     * Uses the info from the given {@link PushMessage} message to send an push notification.
     * @param pushMessage to send an push notification.
     * @param doneCallback Called when the operation succeed.
     * @param failCallback Called when the operation failed.
     * @return
     */
    push(pushMessage, doneCallback, failCallback) {
        return this.db.pushDevice(pushMessage).then(doneCallback, failCallback);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlRmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9iaW5kaW5nL0RldmljZUZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE9BQU8sTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxNQUFNLE9BQU8sYUFBYyxTQUFRLGFBQTJCO0lBQzVEOztPQUVHO0lBQ0gsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDO0lBQzFCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGNBQWM7UUFDWixNQUFNLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN6QyxHQUFHLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQTBCRCxRQUFRLENBQUMsRUFBVSxFQUFFLG1CQUE4QyxFQUFFLE1BQXNDLEVBQ3pHLFlBQWtCLEVBQUUsWUFBa0I7UUFDdEMsSUFBSSxNQUFNLFlBQVksUUFBUSxFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztTQUMzRTtRQUVELE1BQU0sWUFBWSxHQUFHLE9BQU8sbUJBQW1CLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztRQUVwSCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBSSxDQUFDLFdBQXdCLEVBQUUsWUFBa0IsRUFBRSxZQUFrQjtRQUNuRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDMUUsQ0FBQztDQUNGIn0=