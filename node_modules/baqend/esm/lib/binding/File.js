var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _a;
import { PersistentError } from '../error';
import { Acl } from '../Acl';
import { uuid, trailingSlashIt, } from '../util';
import * as message from '../message';
import { StatusCode, } from '../connector';
const FILE_BUCKET = '/file';
const FILE_BUCKET_LENGTH = FILE_BUCKET.length;
const ID = Symbol('Id');
const METADATA = Symbol('Metadata');
const DATA = Symbol('Data');
/**
 * Creates a file object, which represents one specific file reference.
 * This File object can afterwards be used to up- and download the file contents or to retrieves and change the files
 * metadata.
 *
 * The file data can be uploaded and downloaded as:
 *
 *  <table class="table">
 *   <tr>
 *     <th>type</th>
 *     <th>JavaScript type</th>
 *     <th>Description</th>
 *   </tr>
 *   <tr>
 *     <td>'arraybuffer'</td>
 *     <td>ArrayBuffer</td>
 *     <td>The content is represented as a fixed-length raw binary data buffer</td>
 *   </tr>
 *   <tr>
 *     <td>'blob'</th>
 *     <td>Blob</td>
 *     <td>The content is represented as a simple blob</td>
 *   </tr>
 *   <tr>
 *     <td>'json'</td>
 *     <td>object|array|string</td>
 *     <td>The file content is represented as json</td>
 *   </tr>
 *   <tr>
 *     <td>'text'</td>
 *     <td>string</td>
 *     <td>The file content is represented through the string</td>
 *   </tr>
 *   <tr>
 *     <td>'base64'</td>
 *     <td>string</td>
 *     <td>The file content as base64 encoded string</td>
 *   </tr>
 *   <tr>
 *     <td>'data-url'</td>
 *     <td>string</td>
 *     <td>A data url which represents the file content</td>
 *   </tr>
 * </table>
 *
 */
export class File {
    /**
     * Creates a new file object which represents a file at the given id. Data which is provided to the constructor will
     * be uploaded by invoking {@link upload()}
     * @param fileOptions The fileOptions used to create a new file object, or just the id of the file
     */
    constructor(fileOptions) {
        /**
         * The database connection to use
         */
        this.db = null; // is lazy initialized and never null
        this[_a] = null;
        // Is fileOptions just an id?
        const opt = typeof fileOptions === 'string' ? { id: fileOptions } : (fileOptions || {});
        if (opt.id) {
            // Check validity of id
            const nameSeparator = opt.id.indexOf('/', '/file/'.length);
            if (nameSeparator === -1 || opt.id.indexOf('/file/') !== 0) {
                throw new Error(`Invalid file reference ${opt.id}`);
            }
            this[ID] = opt.id;
        }
        else {
            this[ID] = this.createIdFromOptions(opt);
        }
        // Assign metadata
        this.setDataOptions(opt);
        this.isFolder = this.id.charAt(this.id.length - 1) === '/';
    }
    /**
     * The complete id of the file, including folder and name
     */
    get id() {
        return this[ID];
    }
    // @ts-ignore
    get url() {
        throw new Error('This method is removed. Use the asynchronous File.createURL() method instead.');
    }
    /**
     * The name of the file
     */
    get name() {
        return this.id.substring(this.id.lastIndexOf('/', this.id.length - 2) + 1);
    }
    /**
     * The mimeType of the file, only accessible after fetching the metadata or downloading/uploading/providing the file
     */
    get mimeType() {
        if (this.isFolder) {
            throw new Error('A folder has no mimeType');
        }
        this.checkAvailable();
        return this[METADATA].mimeType;
    }
    /**
     * The current file acl, only accessible after fetching the metadata or downloading/uploading/providing the file
     */
    get acl() {
        this.checkAvailable();
        return this[METADATA].acl;
    }
    /**
     * The last modified date of the file, only accessible after fetching the metadata
     * or downloading/uploading/providing the eTag
     */
    get lastModified() {
        if (this.isFolder) {
            throw new Error('A folder has no lastModified');
        }
        this.checkAvailable();
        return this[METADATA].lastModified;
    }
    /**
     * The creation date of the file, only accessible after fetching the metadata
     * or downloading/uploading/providing the eTag
     */
    get createdAt() {
        if (this.isFolder) {
            throw new Error('A folder has no creation date');
        }
        this.checkAvailable();
        return this[METADATA].createdAt;
    }
    /**
     * The eTag of the file, only accessible after fetching the metadata or downloading/uploading/providing the file
     */
    get eTag() {
        if (this.isFolder) {
            throw new Error('A folder has no eTag');
        }
        this.checkAvailable();
        return this[METADATA].eTag;
    }
    /**
     * The custom headers of the file, only accessible after fetching the metadata or downloading/uploading/providing
     * the file
     */
    get headers() {
        if (this.isFolder) {
            throw new Error('A folder has no custom headers');
        }
        this.checkAvailable();
        return this[METADATA].headers;
    }
    /**
     * The size of the file, only accessible after fetching the metadata or downloading/uploading/providing the file
     */
    get size() {
        if (this.isFolder) {
            throw new Error('A folder has no size');
        }
        this.checkAvailable();
        return this[METADATA].size;
    }
    /**
     * The root bucket of this file
     */
    get bucket() {
        return this.id.substring(FILE_BUCKET_LENGTH + 1, this.id.indexOf('/', FILE_BUCKET_LENGTH + 1));
    }
    /**
     * The full path under the bucket of this file
     */
    get key() {
        return this.id.substring(this.id.indexOf('/', FILE_BUCKET_LENGTH + 1) + 1);
    }
    /**
     * The full path of the file.
     */
    get path() {
        return this.id.substring(FILE_BUCKET_LENGTH);
    }
    /**
     * The parent folder of the file.
     */
    get parent() {
        return this.id.substring(FILE_BUCKET_LENGTH, this.id.lastIndexOf('/', this.id.length - 2));
    }
    /**
     * Indicates if the metadata are loaded.
     */
    get isMetadataLoaded() {
        return !!this[METADATA];
    }
    /**
     * Parses an E-Tag header
     * @param eTag The E-Tag to parse or something falsy
     * @return Returns the parsed E-Tag or null, if it could not be parsed
     */
    static parseETag(eTag) {
        if (!eTag) {
            return null;
        }
        const match = eTag.match(/^(?:[wW]\/)?["'](.*)["']$/);
        if (!match) {
            return null;
        }
        return match[1];
    }
    /**
     * The fully url to the file, can be directly used to link the file, i.e. in link tags ot image sources
     * @param authorize - Authorize the the link with an temporary token, to give authorized access to this protected
     * resource default false if the root bucket is www, true otherwise
     * @return A url with an optional token, to give direct access o the linked resource
     */
    createURL(authorize) {
        if (this.isFolder) {
            throw new Error('Url can not be created for folders.');
        }
        return this.db.createURL(this.id, typeof authorize === 'boolean' ? authorize : this.bucket !== 'www');
    }
    /**
     * Uploads the file content which was provided in the constructor or by uploadOptions.data
     * @param uploadOptions The upload options
     * @param [uploadOptions.force=false] force the upload and overwrite any existing files without validating
     * it
     * @param [uploadOptions.progress] listen to progress changes during upload
     * @param doneCallback The callback is invoked after the upload succeed successfully
     * @param failCallback The callback is invoked if any error is occurred
     * @return A promise which will be fulfilled with this file object where the metadata is updated
     */
    upload(uploadOptions, doneCallback, failCallback) {
        var _b;
        const opt = uploadOptions || {};
        if (this.isFolder) {
            throw new Error('A folder cannot be uploaded');
        }
        this.setDataOptions(opt);
        const uploadMessage = new message.UploadFile(this.bucket, this.key)
            .entity(this[DATA].data, (_b = this[DATA]) === null || _b === void 0 ? void 0 : _b.type);
        const meta = this[METADATA];
        if (meta) {
            uploadMessage.acl(meta.acl);
            uploadMessage.contentLength(meta.size);
            uploadMessage.mimeType(meta.mimeType);
            uploadMessage.customHeaders(meta.headers);
        }
        uploadMessage.progress(opt.progress || null);
        this.conditional(uploadMessage, opt);
        this.db.addToBlackList(this.id);
        return this.db.send(uploadMessage).then((response) => {
            this[DATA] = null;
            this.fromJSON(response.entity);
            return this;
        }).then(doneCallback, failCallback);
    }
    /**
     * Download a file and providing it in the requested type
     * @param downloadOptions The download options
     * @param downloadOptions.type="blob" The type used to provide the file
     * @param downloadOptions.refresh=false Indicates to make a revalidation request and not use the cache
     * @param doneCallback The callback is invoked after the download succeed
     * successfully
     * @param failCallback The callback is invoked if any error is occurred
     * @return A promise which will be fulfilled with the downloaded file content
     */
    download(downloadOptions, doneCallback, failCallback) {
        const opt = downloadOptions || {};
        if (this.isFolder) {
            throw new Error('A folder cannot be downloaded');
        }
        const type = opt.type || 'blob';
        const downloadMessage = new message.DownloadFile(this.bucket, this.key)
            .responseType(type);
        this.db.ensureCacheHeader(this.id, downloadMessage, opt.refresh);
        return this.db.send(downloadMessage).then((response) => {
            this.db.addToWhiteList(this.id);
            this.fromHeaders(response.headers);
            return response.entity;
        }, (e) => {
            if (e.status === StatusCode.OBJECT_NOT_FOUND) {
                return null;
            }
            throw e;
        }).then(doneCallback, failCallback);
    }
    /**
     * Deletes a file
     * @param deleteOptions The delete options
     * @param deleteOptions.force=false force the deletion without verifying any version
     * @param doneCallback The callback is invoked after the deletion succeed successfully
     * @param failCallback The callback is invoked if any error is occurred
     * @return A promise which will be fulfilled with this file object,
     * or with a list of all deleted files, if this file is an folder
     */
    delete(deleteOptions, doneCallback, failCallback) {
        const opt = deleteOptions || {};
        const deleteMessage = new message.DeleteFile(this.bucket, this.key);
        this.conditional(deleteMessage, opt);
        if (!this.isFolder) {
            this.db.addToBlackList(this.id);
        }
        return this.db.send(deleteMessage).then((response) => {
            if (!this.isFolder) {
                return this;
            }
            return response.entity.map((fileId) => new this.db.File(fileId));
        }).then(doneCallback, failCallback);
    }
    /**
     * Creates the file id from given options.
     * @param fileOptions
     * @return
     */
    createIdFromOptions(fileOptions) {
        var _b;
        let path;
        if (fileOptions.path) {
            path = fileOptions.path;
        }
        else {
            const parent = trailingSlashIt(fileOptions.parent || '/www');
            if (parent.length < 3) {
                throw new Error(`Invalid parent name: ${parent}`);
            }
            const name = fileOptions.name || ((_b = fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.data) === null || _b === void 0 ? void 0 : _b.name) || uuid();
            path = parent + name;
        }
        // Add leading slash if missing
        if (path.charAt(0) !== '/') {
            path = `/${path}`;
        }
        // Check path validity
        if (path.indexOf('//') !== -1 || path.length < 3) {
            throw new Error(`Invalid path: ${path}`);
        }
        return FILE_BUCKET + path;
    }
    /**
     * Makes the given message a conditional request based on the file metadata
     * @param msg The message to make conditional
     * @param options additional request options
     * @param options.force=false Force the request operation by didn't make it conditional
     */
    conditional(msg, options) {
        if (options.force) {
            return;
        }
        const meta = this[METADATA];
        if (!meta || (!meta.lastModified && !meta.eTag)) {
            msg.ifNoneMatch('*');
            return;
        }
        msg.ifUnmodifiedSince(meta.lastModified);
        msg.ifMatch(meta.eTag);
    }
    /**
     * Gets the file metadata of a file
     * @param options The load metadata options
     * @param [options.refresh=false] Force a revalidation while fetching the metadata
     * @param doneCallback The callback is invoked after the metadata is fetched
     * @param failCallback The callback is invoked if any error has occurred
     * @return A promise which will be fulfilled with this file
     */
    loadMetadata(options, doneCallback, failCallback) {
        const opt = options || {};
        if (this.isFolder) {
            throw new Error('A folder has no mata data.');
        }
        const msg = new message.GetFileMetadata(this.bucket, this.key);
        this.db.ensureCacheHeader(this.id, msg, opt.refresh);
        return this.db.send(msg).then((response) => {
            // do not white list the file, because head-request does not revalidate the cache.
            this.fromHeaders(response.headers);
            return this;
        }, (e) => {
            if (e.status === StatusCode.OBJECT_NOT_FOUND) {
                return null;
            }
            throw e;
        }).then(doneCallback, failCallback);
    }
    /**
     * Updates the mata data of this file.
     * @param options The save metadata options
     * @param [options.force=false] force the update and overwrite the existing metadata without validating it
     * @param doneCallback The callback is invoked after the metadata is saved
     * @param failCallback The callback is invoked if any error has occurred
     * @return A promise which will be fulfilled with this file
     */
    saveMetadata(options, doneCallback, failCallback) {
        const opt = options || {};
        const json = this.toJSON();
        const msg = new message.UpdateFileMetadata(this.bucket, this.key)
            .entity(json);
        this.conditional(msg, opt);
        return this.db.send(msg).then((response) => {
            this.fromJSON(response.entity);
            return this;
        }).then(doneCallback, failCallback);
    }
    /**
     * Validates and sets the file metadata based on the given options
     * @param options
     * @private
     */
    setDataOptions(options) {
        const { data, type } = options, metadata = __rest(options, ["data", "type"]);
        if (!data) {
            return;
        }
        // Set data
        this[DATA] = { type, data };
        const mimeType = this.guessMimeType(options) || undefined;
        this.fromJSON(Object.assign(Object.assign({}, metadata), { mimeType }));
    }
    /**
     * Gets the MIME type of given file options.
     * @param options
     * @return Returns the guessed MIME type or null, if it could not be guessed.
     * @private
     */
    guessMimeType(options) {
        const { mimeType } = options;
        if (mimeType) {
            return mimeType;
        }
        if (typeof Blob !== 'undefined' && options.data instanceof Blob) {
            return options.data.type;
        }
        if (options.type === 'data-url' && typeof options.data === 'string') {
            const match = options.data.match(/^data:(.+?)(;base64)?,.*$/);
            return match && match[1];
        }
        return null;
    }
    /**
     * @param headers
     */
    fromHeaders(headers) {
        this.fromJSON({
            eTag: File.parseETag(headers.etag),
            lastModified: headers['last-modified'],
            createdAt: headers['baqend-created-at'],
            mimeType: headers['content-type'],
            acl: headers['baqend-acl'] && JSON.parse(headers['baqend-acl']),
            size: +headers['baqend-size'],
            headers: headers['baqend-custom-headers'] && JSON.parse(headers['baqend-custom-headers']),
        });
    }
    /**
     * Deserialize the given JSON file metadata back to this file instance
     *
     * If the JSON object contains an ID, it must match with this file ID, otherwise an exception is thrown.
     *
     * @param json The json to deserialize
     */
    fromJSON(json) {
        const { id } = json;
        if (id && this.id !== id) {
            throw new Error(`This file id ${this.id} does not match the given json id ${id}`);
        }
        const meta = this[METADATA] || {};
        let acl;
        if (json.acl instanceof Acl) {
            acl = json.acl;
        }
        else {
            acl = meta.acl || new Acl();
            if (json.acl) {
                acl.fromJSON(json.acl);
            }
        }
        // keep last known lastModified, createdAt, eTag and headers
        this[METADATA] = Object.assign(Object.assign({}, this[METADATA]), { mimeType: json.mimeType, lastModified: (json.lastModified && new Date(json.lastModified)) || meta.lastModified, createdAt: (json.createdAt && new Date(json.createdAt)) || meta.createdAt, eTag: json.eTag || meta.eTag, acl, size: typeof json.size === 'number' ? json.size : json.contentLength, headers: json.headers || meta.headers || {} });
    }
    /**
     * Serialize the file metadata of this object to json
     * @return The serialized file metadata as json
     */
    toJSON() {
        var _b;
        this.checkAvailable();
        const meta = this[METADATA];
        return {
            id: this.id,
            mimeType: meta.mimeType,
            eTag: meta.eTag,
            acl: (_b = meta.acl) === null || _b === void 0 ? void 0 : _b.toJSON(),
            size: meta.size,
            lastModified: meta.lastModified && meta.lastModified.toISOString(),
            createdAt: meta.createdAt && meta.createdAt.toISOString(),
            headers: meta.headers,
        };
    }
    /**
     * Checks whenever metadata are already loaded of the file, throws an error otherwise
     * @return
     */
    checkAvailable() {
        if (!this.isMetadataLoaded) {
            throw new PersistentError(`The file metadata of ${this.id} is not available.`);
        }
    }
}
_a = DATA;
//# sourceMappingURL=data:application/json;base64,