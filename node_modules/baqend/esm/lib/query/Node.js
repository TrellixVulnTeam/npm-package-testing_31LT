import { Entity } from '../binding';
import { Query, } from './Query';
import * as message from '../message';
import { Metadata } from '../intersection';
import { Stream } from './Stream';
/**
 * A Query Node saves the state of the query being built
 */
export class Node extends Query {
    constructor() {
        super(...arguments);
        /**
         * The offset how many results should be skipped
         */
        this.firstResult = 0;
        /**
         * The limit how many objects should be returned
         * @type number
         * @readonly
         */
        this.maxResults = -1;
        /**
         * The properties which should be used sort the result
         */
        this.order = {};
    }
    eventStream(options, onNext, onError, onComplete) {
        if (options instanceof Function) {
            return this.eventStream({}, options, onNext, onError);
        }
        const observable = Stream.createEventStream(this.entityManager, this.createRealTimeQuery(), options);
        if (onNext instanceof Function) {
            return observable.subscribe(onNext, onError, onComplete);
        }
        return observable;
    }
    resultStream(options, onNext, onError, onComplete) {
        if (options instanceof Function) {
            return this.resultStream({}, options, onNext, onError);
        }
        const observable = Stream.createResultStream(this.entityManager, this.createRealTimeQuery(), options);
        if (onNext instanceof Function) {
            return observable.subscribe(onNext, onError, onComplete);
        }
        return observable;
    }
    /**
     * @inheritDoc
     */
    resultList(options, doneCallback, failCallback) {
        var _a;
        if (options instanceof Function) {
            return this.resultList({}, options, doneCallback);
        }
        const type = this.resultClass ? this.entityManager.metamodel.entity(this.resultClass) : null;
        if (!type) {
            throw new Error('Only typed queries can be executed.');
        }
        const query = this.serializeQuery();
        const sort = this.serializeSort();
        const uriSize = (((_a = this.entityManager.connection) === null || _a === void 0 ? void 0 : _a.host.length) || 0) + query.length + sort.length;
        let msg;
        if (uriSize > Query.MAX_URI_SIZE) {
            msg = new message.AdhocQueryPOST(type.name, this.firstResult, this.maxResults, sort)
                .entity(query, 'text');
        }
        else {
            msg = new message.AdhocQuery(type.name, query, this.firstResult, this.maxResults, sort);
        }
        return this.entityManager.send(msg)
            .then((response) => this.createResultList(response.entity, options))
            .then(doneCallback, failCallback);
    }
    /**
     * @inheritDoc
     */
    singleResult(options, doneCallback, failCallback) {
        var _a;
        if (options instanceof Function) {
            return this.singleResult({}, options, doneCallback);
        }
        const type = this.resultClass ? this.entityManager.metamodel.entity(this.resultClass) : null;
        if (!type) {
            throw new Error('Only typed queries can be executed.');
        }
        const query = this.serializeQuery();
        const sort = this.serializeSort();
        const uriSize = (((_a = this.entityManager.connection) === null || _a === void 0 ? void 0 : _a.host.length) || 0) + query.length;
        let msg;
        if (uriSize > Query.MAX_URI_SIZE) {
            msg = new message.AdhocQueryPOST(type.name, this.firstResult, 1, sort)
                .entity(query, 'text');
        }
        else {
            msg = new message.AdhocQuery(type.name, query, this.firstResult, 1, sort);
        }
        return this.entityManager.send(msg)
            .then((response) => this.createResultList(response.entity, options))
            .then((list) => (list.length ? list[0] : null))
            .then(doneCallback, failCallback);
    }
    /**
     * @inheritDoc
     */
    count(doneCallback, failCallback) {
        var _a;
        const type = this.resultClass ? this.entityManager.metamodel.entity(this.resultClass) : null;
        if (!type) {
            throw new Error('Only typed queries can be executed.');
        }
        const query = this.serializeQuery();
        const uriSize = (((_a = this.entityManager.connection) === null || _a === void 0 ? void 0 : _a.host.length) || 0) + query.length;
        let msg;
        if (uriSize > Query.MAX_URI_SIZE) {
            msg = new message.AdhocCountQueryPOST(type.name)
                .entity(query, 'text');
        }
        else {
            msg = new message.AdhocCountQuery(type.name, query);
        }
        return this.entityManager.send(msg)
            .then((response) => response.entity.count)
            .then(doneCallback, failCallback);
    }
    serializeQuery() {
        return JSON.stringify(this, function argSerializer(k, v) {
            // this referees here to the object which owns the key k
            const typedValue = this[k];
            if (typedValue instanceof Date) {
                return { $date: v };
            }
            if (typedValue instanceof Entity) {
                return typedValue.id;
            }
            return v;
        });
    }
    serializeSort() {
        return JSON.stringify(this.order);
    }
    createResultList(result, options) {
        if (result.length) {
            return Promise.all(result.map((el) => {
                if (el.id) {
                    const entity = this.entityManager.getReference(this.resultClass, el.id);
                    const metadata = Metadata.get(entity);
                    metadata.type.fromJsonValue(metadata, el, entity, { persisting: true });
                    return this.entityManager.resolveDepth(entity, options);
                }
                return this.entityManager.load(Object.keys(el)[0]);
            }))
                .then((objects) => objects.filter((val) => !!val));
        }
        return Promise.resolve([]);
    }
    createRealTimeQuery() {
        const type = this.resultClass ? this.entityManager.metamodel.entity(this.resultClass) : null;
        if (!type) {
            throw new Error('Only typed queries can be executed.');
        }
        const query = {
            bucket: type.name,
            query: this.serializeQuery(),
        };
        const sort = this.serializeSort();
        if (sort && sort !== '{}') {
            query.sort = sort;
        }
        if (this.maxResults > 0) {
            query.limit = this.maxResults;
        }
        if (this.firstResult > 0) {
            query.offset = this.firstResult;
        }
        return query;
    }
    addOrder(fieldOrSort, order) {
        if (typeof fieldOrSort === 'string') {
            this.order[fieldOrSort] = order;
        }
        else {
            this.order = fieldOrSort;
        }
        return this;
    }
    addOffset(offset) {
        this.firstResult = offset;
        return this;
    }
    addLimit(limit) {
        this.maxResults = limit;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,