var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CommunicationError } from '../error';
/**
 * Checks whether the user uses a browser which does support revalidation.
 */
// @ts-ignore
const REVALIDATION_SUPPORTED = typeof navigator === 'undefined' || (typeof chrome !== 'undefined' && /google/i.test(navigator.vendor)) || (/cros i686/i.test(navigator.platform));
export const StatusCode = {
    NOT_MODIFIED: 304,
    BAD_CREDENTIALS: 460,
    BUCKET_NOT_FOUND: 461,
    INVALID_PERMISSION_MODIFICATION: 462,
    INVALID_TYPE_VALUE: 463,
    OBJECT_NOT_FOUND: 404,
    OBJECT_OUT_OF_DATE: 412,
    PERMISSION_DENIED: 466,
    QUERY_DISPOSED: 467,
    QUERY_NOT_SUPPORTED: 468,
    SCHEMA_NOT_COMPATIBLE: 469,
    SCHEMA_STILL_EXISTS: 470,
    SYNTAX_ERROR: 471,
    TRANSACTION_INACTIVE: 472,
    TYPE_ALREADY_EXISTS: 473,
    TYPE_STILL_REFERENCED: 474,
    SCRIPT_ABORTION: 475,
};
export class Message {
    /**
     * @param args The path arguments
     */
    constructor(...args) {
        this.withCredentials = false;
        this.progressCallback = null;
        this._tokenStorage = null;
        this._responseType = null;
        let index = 0;
        let path = this.spec.path[0];
        const len = this.spec.path.length;
        for (let i = 1; i < len; i += 1) {
            if (this.spec.dynamic && len - 1 === i) {
                path += args[index].split('/').map(encodeURIComponent).join('/');
            }
            else {
                path += encodeURIComponent(args[index]) + this.spec.path[i];
            }
            index += 1;
        }
        let query = '';
        for (let i = 0; i < this.spec.query.length; i += 1) {
            const arg = args[index];
            index += 1;
            if (arg !== undefined && arg !== null) {
                query += (query || path.indexOf('?') !== -1) ? '&' : '?';
                query += `${this.spec.query[i]}=${encodeURIComponent(arg)}`;
            }
        }
        this.request = {
            method: this.spec.method,
            path: path + query,
            entity: null,
            headers: {},
        };
        if (args[index]) {
            this.entity(args[index], 'json');
        }
        this.responseType('json');
    }
    /**
     * Returns the specification of this message
     */
    get spec() { return null; }
    /**
     * Creates a new message class with the given message specification
     * @return A created message object for the specification
     */
    static create(specification) {
        const parts = specification.path.split('?');
        const path = parts[0].split(/[:*]\w*/);
        const query = [];
        if (parts[1]) {
            parts[1].split('&').forEach((arg) => {
                const part = arg.split('=');
                query.push(part[0]);
            });
        }
        const spec = {
            path,
            query,
            status: specification.status,
            method: specification.method,
            dynamic: specification.path.indexOf('*') !== -1,
        };
        return class extends Message {
            get spec() {
                return spec;
            }
        };
    }
    /**
     * Creates a new message class with the given message specification and a full path
     * @param specification
     * @param members additional members applied to the created message
     * @return
     */
    static createExternal(specification, members) {
        const { path } = specification, props = __rest(specification, ["path"]);
        const spec = Object.assign({ dynamic: false, path: [path] }, props);
        /**
         * @ignore
         */
        const cls = class extends Message {
            get spec() {
                return spec;
            }
        };
        Object.assign(cls.prototype, members);
        return cls;
    }
    get isBinary() {
        return (this.request.type && this.request.type in Message.BINARY) || this._responseType in Message.BINARY;
    }
    tokenStorage(value) {
        if (value === undefined) {
            return this._tokenStorage;
        }
        this._tokenStorage = value;
        return this;
    }
    path(path) {
        if (path !== undefined) {
            const queryIndex = this.request.path.indexOf('?') + 1;
            this.request.path = path + (queryIndex > 0 ? (path.indexOf('?') > -1 ? '&' : '?') + this.request.path.substring(queryIndex) : '');
            return this;
        }
        return this.request.path;
    }
    header(name, value) {
        if (value === null) {
            delete this.request.headers[name];
            return this;
        }
        if (value !== undefined) {
            this.request.headers[name] = value;
            return this;
        }
        return this.request.headers[name];
    }
    /**
     * Sets the entity type
     * @param data - The data to send
     * @param type - the type of the data one of 'json'|'text'|'blob'|'arraybuffer'
     * defaults detect the type based on the body data
     * @return This message object
     */
    entity(data, type) {
        let requestType = type;
        if (!requestType) {
            if (typeof data === 'string') {
                if (/^data:(.+?)(;base64)?,.*$/.test(data)) {
                    requestType = 'data-url';
                }
                else {
                    requestType = 'text';
                }
            }
            else if (typeof Blob !== 'undefined' && data instanceof Blob) {
                requestType = 'blob';
            }
            else if (typeof Buffer !== 'undefined' && data instanceof Buffer) {
                requestType = 'buffer';
            }
            else if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
                requestType = 'arraybuffer';
            }
            else if (typeof FormData !== 'undefined' && data instanceof FormData) {
                requestType = 'form';
            }
            else {
                requestType = 'json';
            }
        }
        this.request.type = requestType;
        this.request.entity = data;
        return this;
    }
    mimeType(mimeType) {
        return this.header('content-type', mimeType);
    }
    contentLength(contentLength) {
        if (contentLength !== undefined) {
            return this.header('content-length', `${contentLength}`);
        }
        return Number(this.header('content-length'));
    }
    ifMatch(eTag) {
        return this.header('If-Match', this.formatETag(eTag));
    }
    ifNoneMatch(eTag) {
        return this.header('If-None-Match', this.formatETag(eTag));
    }
    ifUnmodifiedSince(date) {
        // IE 10 returns UTC strings and not an RFC-1123 GMT date string
        return this.header('if-unmodified-since', date && date.toUTCString().replace('UTC', 'GMT'));
    }
    /**
     * Indicates that the request should not be served by a local cache
     * @return
     */
    noCache() {
        if (!REVALIDATION_SUPPORTED) {
            this.ifMatch('') // is needed for firefox or safari (but forbidden for chrome)
                .ifNoneMatch('-'); // is needed for edge and ie (but forbidden for chrome)
        }
        return this.cacheControl('max-age=0, no-cache');
    }
    cacheControl(value) {
        return this.header('cache-control', value);
    }
    acl(acl) {
        return this.header('baqend-acl', acl && JSON.stringify(acl));
    }
    customHeaders(customHeaders) {
        return this.header('baqend-custom-headers', customHeaders && JSON.stringify(customHeaders));
    }
    accept(accept) {
        return this.header('accept', accept);
    }
    responseType(type) {
        if (type !== undefined) {
            this._responseType = type;
            return this;
        }
        return this._responseType;
    }
    progress(callback) {
        if (callback !== undefined) {
            this.progressCallback = callback;
            return this;
        }
        return this.progressCallback;
    }
    /**
     * Adds the given string to the request path
     *
     * If the parameter is an object, it will be serialized as a query string.
     *
     * @param query which will added to the request path
     * @return
     */
    addQueryString(query) {
        if (typeof query === 'string') {
            this.request.path += query;
            return this;
        }
        if (query) {
            let sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';
            Object.keys(query).forEach((key) => {
                this.request.path += `${sep + key}=${encodeURIComponent(query[key])}`;
                sep = '&';
            });
        }
        return this;
    }
    formatETag(eTag) {
        if (eTag === null || eTag === undefined || eTag === '*') {
            return eTag;
        }
        let tag = `${eTag}`;
        if (tag.indexOf('"') === -1) {
            tag = `"${tag}"`;
        }
        return tag;
    }
    /**
     * Handle the receive
     * @param response The received response headers and data
     * @return
     */
    doReceive(response) {
        if (this.spec.status.indexOf(response.status) === -1) {
            throw new CommunicationError(this, response);
        }
    }
}
Message.StatusCode = StatusCode;
Message.BINARY = {
    blob: true,
    buffer: true,
    stream: true,
    arraybuffer: true,
    'data-url': true,
    base64: true,
};
export const OAuthMessages = {
    Google: Message.createExternal({
        method: 'OAUTH',
        path: 'https://accounts.google.com/o/oauth2/auth?response_type=code&access_type=online',
        query: ['client_id', 'scope', 'state'],
        status: [200],
    }, {
        addRedirectOrigin(baseUri) {
            this.addQueryString({
                redirect_uri: `${baseUri}/db/User/OAuth/google`,
            });
        },
    }),
    Facebook: Message.createExternal({
        method: 'OAUTH',
        path: 'https://www.facebook.com/v7.0/dialog/oauth?response_type=code',
        query: ['client_id', 'scope', 'state'],
        status: [200],
    }, {
        addRedirectOrigin(baseUri) {
            this.addQueryString({
                redirect_uri: `${baseUri}/db/User/OAuth/facebook`,
            });
        },
    }),
    GitHub: Message.createExternal({
        method: 'OAUTH',
        path: 'https://github.com/login/oauth/authorize?response_type=code&access_type=online',
        query: ['client_id', 'scope', 'state'],
        status: [200],
    }, {
        addRedirectOrigin(baseUri) {
            this.addQueryString({
                redirect_uri: `${baseUri}/db/User/OAuth/github`,
            });
        },
    }),
    LinkedIn: Message.createExternal({
        method: 'OAUTH',
        path: 'https://www.linkedin.com/oauth/v2/authorization?response_type=code',
        query: ['client_id', 'scope', 'state'],
        status: [200],
    }, {
        addRedirectOrigin(baseUri) {
            this.addQueryString({
                redirect_uri: `${baseUri}/db/User/OAuth/linkedin`,
            });
        },
    }),
    Twitter: Message.createExternal({
        method: 'OAUTH',
        path: '',
        query: [],
        status: [200],
    }, {
        addRedirectOrigin(baseUri) {
            this.request.path = `${baseUri}/db/User/OAuth1/twitter`;
        },
    }),
    Salesforce: Message.createExternal({
        method: 'OAUTH',
        path: '',
        query: ['client_id', 'scope', 'state'],
        status: [200],
    }, {
        addRedirectOrigin(baseUri) {
            this.addQueryString({
                redirect_uri: `${baseUri}/db/User/OAuth/salesforce`,
            });
        },
    }),
};
//# sourceMappingURL=data:application/json;base64,