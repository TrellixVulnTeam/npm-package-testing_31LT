import { UpdateOperation } from './UpdateOperation';
const ALLOWED_OPERATIONS = [
    '$add',
    '$and',
    '$currentDate',
    '$dec',
    '$inc',
    '$max',
    '$min',
    '$mul',
    '$or',
    '$pop',
    '$push',
    '$put',
    '$remove',
    '$rename',
    '$replace',
    '$set',
    '$shift',
    '$unshift',
    '$xor',
];
export class PartialUpdateBuilder {
    /**
     * @param operations
     */
    constructor(operations) {
        this.operations = [];
        if (operations) {
            this.addOperations(operations);
        }
    }
    /**
     * Sets a field to a given value
     *
     * @param field The field to set
     * @param value The value to set to
     * @return
     */
    set(field, value) {
        let val = value;
        if (val instanceof Set) {
            val = Array.from(val);
        }
        else if (val instanceof Map) {
            const newValue = {};
            val.forEach((v, k) => {
                newValue[k] = v;
            });
            val = newValue;
        }
        return this.addOperation(field, '$set', val);
    }
    /**
     * Increments a field by a given value
     *
     * @param field The field to increment
     * @param by The number to increment by, defaults to 1
     * @return
     */
    inc(field, by) {
        return this.addOperation(field, '$inc', typeof by === 'number' ? by : 1);
    }
    /**
     * Decrements a field by a given value
     *
     * @param field The field to decrement
     * @param by The number to decrement by, defaults to 1
     * @return
     */
    dec(field, by) {
        return this.inc(field, typeof by === 'number' ? -by : -1);
    }
    /**
     * Multiplies a field by a given number
     *
     * @param field The field to multiply
     * @param multiplicator The number to multiply by
     * @return
     */
    mul(field, multiplicator) {
        if (typeof multiplicator !== 'number') {
            throw new Error('Multiplicator must be a number.');
        }
        return this.addOperation(field, '$mul', multiplicator);
    }
    /**
     * Divides a field by a given number
     *
     * @param field The field to divide
     * @param divisor The number to divide by
     * @return
     */
    div(field, divisor) {
        if (typeof divisor !== 'number') {
            throw new Error('Divisor must be a number.');
        }
        return this.addOperation(field, '$mul', 1 / divisor);
    }
    /**
     * Sets the highest possible value of a field
     *
     * @param field The field to compare with
     * @param value The highest possible value
     * @return
     */
    min(field, value) {
        if (typeof value !== 'number') {
            throw new Error('Value must be a number');
        }
        return this.addOperation(field, '$min', value);
    }
    /**
     * Sets the smallest possible value of a field
     *
     * @param field The field to compare with
     * @param value The smalles possible value
     * @return
     */
    max(field, value) {
        if (typeof value !== 'number') {
            throw new Error('Value must be a number');
        }
        return this.addOperation(field, '$max', value);
    }
    /**
     * Removes an item from an array or map
     *
     * @param field The field to perform the operation on
     * @param item The item to add
     * @return
     */
    remove(field, item) {
        return this.addOperation(field, '$remove', item);
    }
    /**
     * Puts an item from an array or map
     *
     * @param field The field to perform the operation on
     * @param key The map key to put the value to or an object of arguments
     * @param [value] The value to put if a key was used
     * @return
     */
    put(field, key, value) {
        const obj = {};
        if (typeof key === 'string' || typeof key === 'number') {
            obj[key] = value;
        }
        else if (typeof key === 'object') {
            Object.assign(obj, key);
        }
        return this.addOperation(field, '$put', obj);
    }
    /**
     * Pushes an item into a list
     *
     * @param field The field to perform the operation on
     * @param item The item to add
     * @return
     */
    push(field, item) {
        return this.addOperation(field, '$push', item);
    }
    /**
     * Unshifts an item into a list
     *
     * @param field The field to perform the operation on
     * @param item The item to add
     * @return
     */
    unshift(field, item) {
        return this.addOperation(field, '$unshift', item);
    }
    /**
     * Pops the last item out of a list
     *
     * @param field The field to perform the operation on
     * @return
     */
    pop(field) {
        return this.addOperation(field, '$pop');
    }
    /**
     * Shifts the first item out of a list
     *
     * @param field The field to perform the operation on
     * @return
     */
    shift(field) {
        return this.addOperation(field, '$shift');
    }
    /**
     * Adds an item to a set
     *
     * @param field The field to perform the operation on
     * @param item The item to add
     * @return
     */
    add(field, item) {
        return this.addOperation(field, '$add', item);
    }
    /**
     * Replaces an item at a given index
     *
     * @param path The path to perform the operation on
     * @param index The index where the item will be replaced
     * @param item The item to replace with
     * @return
     */
    replace(path, index, item) {
        if (this.hasOperationOnPath(path)) {
            throw new Error(`You cannot update ${path} multiple times`);
        }
        return this.addOperation(`${path}.${index}`, '$replace', item);
    }
    /**
     * Sets a datetime field to the current moment
     *
     * @param field The field to perform the operation on
     * @return
     */
    currentDate(field) {
        return this.addOperation(field, '$currentDate');
    }
    /**
     * Performs a bitwise AND on a path
     *
     * @param path The path to perform the operation on
     * @param bitmask The bitmask taking part in the operation
     * @return
     */
    and(path, bitmask) {
        return this.addOperation(path, '$and', bitmask);
    }
    /**
     * Performs a bitwise OR on a path
     *
     * @param path The path to perform the operation on
     * @param bitmask The bitmask taking part in the operation
     * @return
     */
    or(path, bitmask) {
        return this.addOperation(path, '$or', bitmask);
    }
    /**
     * Performs a bitwise XOR on a path
     *
     * @param path The path to perform the operation on
     * @param bitmask The bitmask taking part in the operation
     * @return
     */
    xor(path, bitmask) {
        return this.addOperation(path, '$xor', bitmask);
    }
    /**
     * Renames a field
     *
     * @param oldPath The old field name
     * @param newPath The new field name
     * @return
     */
    rename(oldPath, newPath) {
        return this.addOperation(oldPath, '$rename', newPath);
    }
    /**
     * Returns a JSON representation of this partial update
     *
     * @return
     */
    toJSON() {
        return this.operations.reduce((json, operation) => (Object.assign(Object.assign({}, json), { [operation.name]: Object.assign(Object.assign({}, json[operation.name]), { [operation.path]: operation.value }) })), {});
    }
    /**
     * Executes the partial update
     *
     * @return The promise resolves when the partial update has been executed successfully
     * @abstract
     */
    execute() {
        throw new Error('Cannot call "execute" on abstract PartialUpdateBuilder');
    }
    /**
     * Adds an update operation on the partial update
     *
     * @param path The path which gets modified by the operation
     * @param operator The operator of the operation to add
     * @param [value] The value used to execute the operation
     * @return
     * @private
     */
    addOperation(path, operator, value) {
        if (typeof path !== 'string') {
            throw new Error('Path must be a string');
        }
        if (ALLOWED_OPERATIONS.indexOf(operator) === -1) {
            throw new Error(`Operation invalid: ${operator}`);
        }
        if (this.hasOperationOnPath(path)) {
            throw new Error(`You cannot update ${path} multiple times`);
        }
        // Check for illegal values
        if (typeof value === 'number') {
            if (Number.isNaN(value)) {
                throw new Error('NaN is not a supported value');
            }
            if (!Number.isFinite(value)) {
                throw new Error('Infinity is not a supported value');
            }
        }
        // Add the new operation
        const normalizedValue = typeof value === 'undefined' ? null : value;
        const updateOperation = new UpdateOperation(operator, path, normalizedValue);
        this.operations.push(updateOperation);
        return this;
    }
    /**
     * Adds initial operations
     *
     * @param json
     * @private
     */
    addOperations(json) {
        Object.keys(json).forEach((key) => {
            const pathValueDictionary = json[key];
            Object.keys(pathValueDictionary).forEach((path) => {
                const value = pathValueDictionary[path];
                this.operations.push(new UpdateOperation(key, path, value));
            });
        });
    }
    /**
     * Checks whether an operation on the field exists already
     *
     * @param path The path where the operation is executed on
     * @return True, if the operation does exist
     * @private
     */
    hasOperationOnPath(path) {
        return this.operations.some((op) => op.path === path);
    }
}
// aliases
Object.assign(PartialUpdateBuilder.prototype, {
    increment: PartialUpdateBuilder.prototype.inc,
    decrement: PartialUpdateBuilder.prototype.dec,
    multiply: PartialUpdateBuilder.prototype.mul,
    divide: PartialUpdateBuilder.prototype.div,
    atMost: PartialUpdateBuilder.prototype.min,
    atLeast: PartialUpdateBuilder.prototype.max,
    toNow: PartialUpdateBuilder.prototype.currentDate,
});
//# sourceMappingURL=data:application/json;base64,