export var PersistenceType;
(function (PersistenceType) {
    PersistenceType[PersistenceType["BASIC"] = 0] = "BASIC";
    PersistenceType[PersistenceType["EMBEDDABLE"] = 1] = "EMBEDDABLE";
    PersistenceType[PersistenceType["ENTITY"] = 2] = "ENTITY";
    PersistenceType[PersistenceType["MAPPED_SUPERCLASS"] = 3] = "MAPPED_SUPERCLASS";
})(PersistenceType || (PersistenceType = {}));
export class Type {
    /**
     * @param ref
     * @param typeConstructor
     */
    constructor(ref, typeConstructor) {
        if (ref.indexOf('/db/') !== 0) {
            throw new SyntaxError(`Type ref ${ref} is invalid.`);
        }
        this.ref = ref;
        this.name = ref.substring(4);
        this._typeConstructor = typeConstructor;
    }
    /**
     * The persistent type of this type
     */
    get persistenceType() {
        return -1;
    }
    /**
     * @type boolean
     * @readonly
     */
    get isBasic() {
        return this.persistenceType === PersistenceType.BASIC;
    }
    /**
     * @type boolean
     * @readonly
     */
    get isEmbeddable() {
        return this.persistenceType === PersistenceType.EMBEDDABLE;
    }
    /**
     * @type boolean
     * @readonly
     */
    get isEntity() {
        return this.persistenceType === PersistenceType.ENTITY;
    }
    /**
     * @type boolean
     * @readonly
     */
    get isMappedSuperclass() {
        return this.persistenceType === PersistenceType.MAPPED_SUPERCLASS;
    }
    /**
     * The type constructor of this type
     */
    get typeConstructor() {
        return this._typeConstructor;
    }
    /**
     * @param typeConstructor - sets the type constructor of this type if it is not already set
     */
    set typeConstructor(typeConstructor) {
        if (this._typeConstructor) {
            throw new Error('typeConstructor has already been set.');
        }
        this._typeConstructor = typeConstructor;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tZXRhbW9kZWwvVHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLENBQU4sSUFBWSxlQUtYO0FBTEQsV0FBWSxlQUFlO0lBQ3pCLHVEQUFTLENBQUE7SUFDVCxpRUFBYyxDQUFBO0lBQ2QseURBQVUsQ0FBQTtJQUNWLCtFQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFMVyxlQUFlLEtBQWYsZUFBZSxRQUsxQjtBQUVELE1BQU0sT0FBZ0IsSUFBSTtJQWlFeEI7OztPQUdHO0lBQ0gsWUFBc0IsR0FBVyxFQUFFLGVBQTBCO1FBQzNELElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0IsTUFBTSxJQUFJLFdBQVcsQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDLENBQUM7U0FDdEQ7UUFFRCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0lBQzFDLENBQUM7SUFwRUQ7O09BRUc7SUFDSCxJQUFJLGVBQWU7UUFDakIsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNaLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxlQUFlLEtBQUssZUFBZSxDQUFDLEtBQUssQ0FBQztJQUN4RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsZUFBZSxLQUFLLGVBQWUsQ0FBQyxVQUFVLENBQUM7SUFDN0QsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxlQUFlLENBQUMsTUFBTSxDQUFDO0lBQ3pELENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLGtCQUFrQjtRQUNwQixPQUFPLElBQUksQ0FBQyxlQUFlLEtBQUssZUFBZSxDQUFDLGlCQUFpQixDQUFDO0lBQ3BFLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxnQkFBa0IsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLGVBQWUsQ0FBQyxlQUF5QjtRQUMzQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7U0FDMUQ7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0lBQzFDLENBQUM7Q0E0Q0YifQ==