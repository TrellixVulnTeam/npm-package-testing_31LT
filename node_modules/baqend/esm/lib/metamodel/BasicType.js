import { File } from '../binding';
import { GeoPoint } from '../GeoPoint';
import { PersistenceType, Type } from './Type';
function dateToJson(value) {
    // remove trailing zeros
    return value instanceof Date ? value.toISOString().replace(/\.?0*Z/, 'Z') : null;
}
function jsonToDate(json, currentValue) {
    const date = typeof json === 'string' ? new Date(json) : null;
    if (currentValue && date) {
        // compare normalized date strings instead of plain strings
        return currentValue.toISOString() === date.toISOString() ? currentValue : date;
    }
    return date;
}
export class BasicType extends Type {
    /**
     * Creates a new instance of a native db type
     * @param ref The db ref of this type
     * @param typeConstructor The javascript class of this type
     * @param noResolving Indicates if this type is not the main type of the constructor
     */
    constructor(ref, typeConstructor, noResolving) {
        const id = ref.indexOf('/db/') === 0 ? ref : `/db/${ref}`;
        super(id, typeConstructor);
        this.noResolving = !!noResolving;
    }
    /**
     * @inheritDoc
     */
    get persistenceType() {
        return PersistenceType.BASIC;
    }
    /**
     * @inheritDoc
     */
    toJsonValue(state, currentValue) {
        return currentValue === null || currentValue === undefined ? null : this.typeConstructor(currentValue);
    }
    /**
     * @inheritDoc
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromJsonValue(state, json, currentValue) {
        return json === null || json === undefined ? null : json;
    }
    toString() {
        return `BasicType(${this.ref})`;
    }
}
BasicType.Boolean = new class BooleanType extends BasicType {
    fromJsonValue(state, json, currentValue) {
        return typeof json === 'string' ? json !== 'false' : super.fromJsonValue(state, json, currentValue);
    }
}('Boolean', Boolean);
BasicType.Double = new class DoubleType extends BasicType {
    fromJsonValue(state, json, currentValue) {
        return typeof json === 'string' ? parseFloat(json) : super.fromJsonValue(state, json, currentValue);
    }
}('Double', Number);
BasicType.Integer = new class IntegerType extends BasicType {
    fromJsonValue(state, json, currentValue) {
        return typeof json === 'string' ? parseInt(json, 10) : super.fromJsonValue(state, json, currentValue);
    }
}('Integer', Number);
BasicType.String = new class StringType extends BasicType {
}('String', String);
BasicType.DateTime = new class DateTimeType extends BasicType {
    toJsonValue(state, value) {
        return dateToJson(value);
    }
    fromJsonValue(state, json, currentValue) {
        return jsonToDate(json, currentValue);
    }
}('DateTime', Date);
BasicType.Date = new class DateType extends BasicType {
    toJsonValue(state, value) {
        const json = dateToJson(value);
        return json ? json.substring(0, json.indexOf('T')) : null;
    }
    fromJsonValue(state, json, currentValue) {
        return jsonToDate(json, currentValue);
    }
}('Date', Date);
BasicType.Time = new class TimeType extends BasicType {
    toJsonValue(state, value) {
        const json = dateToJson(value);
        return json ? json.substring(json.indexOf('T') + 1) : null;
    }
    fromJsonValue(state, json, currentValue) {
        return typeof json === 'string' ? jsonToDate(`1970-01-01T${json}`, currentValue) : null;
    }
}('Time', Date);
BasicType.File = new class FileType extends BasicType {
    toJsonValue(state, value) {
        return value instanceof File ? value.id : null;
    }
    fromJsonValue(state, json, currentValue) {
        if (!json) {
            return null;
        }
        if (currentValue && currentValue.id === json) {
            return currentValue;
        }
        if (state.db) {
            return new state.db.File(json);
        }
        return null;
    }
}('File', File);
BasicType.GeoPoint = new class GeoPointType extends BasicType {
    toJsonValue(state, value) {
        return value instanceof GeoPoint ? value.toJSON() : null;
    }
    fromJsonValue(state, json) {
        return json ? new GeoPoint(json) : null;
    }
}('GeoPoint', GeoPoint);
BasicType.JsonArray = new class JsonArrayType extends BasicType {
    toJsonValue(state, value) {
        return Array.isArray(value) ? value : null;
    }
    fromJsonValue(state, json) {
        return Array.isArray(json) ? json : null;
    }
}('JsonArray', Array);
BasicType.JsonObject = new class JsonObjectType extends BasicType {
    toJsonValue(state, value) {
        if (value && value.constructor === Object) {
            return value;
        }
        return null;
    }
}('JsonObject', Object);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzaWNUeXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21ldGFtb2RlbC9CYXNpY1R5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNsQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRy9DLFNBQVMsVUFBVSxDQUFDLEtBQWtCO0lBQ3BDLHdCQUF3QjtJQUN4QixPQUFPLEtBQUssWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDbkYsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLElBQVUsRUFBRSxZQUF5QjtJQUN2RCxNQUFNLElBQUksR0FBRyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDOUQsSUFBSSxZQUFZLElBQUksSUFBSSxFQUFFO1FBQ3hCLDJEQUEyRDtRQUMzRCxPQUFPLFlBQVksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0tBQ2hGO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxPQUFPLFNBQWEsU0FBUSxJQUFPO0lBcUh2Qzs7Ozs7T0FLRztJQUNILFlBQVksR0FBVyxFQUFFLGVBQXlCLEVBQUUsV0FBcUI7UUFDdkUsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMs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