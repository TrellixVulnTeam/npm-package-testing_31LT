#! /usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _package = require("../package.json");

var _traverser = _interopRequireDefault(require("./traverser"));

var _validator = _interopRequireDefault(require("./validator"));

var _excludes = _interopRequireDefault(require("./excludes"));

// -h, --help
// -d, --dry
// -s, --src
// -D?, --dest
// -e, --exclude
// -o, --override
// -v, --version
// -p, --path
var argv = require('minimist')(process.argv.slice(2));

var rename = function rename(args) {
  var _ = args._,
      dry = args.dry,
      exclude = args.exclude,
      help = args.help,
      override = args.override,
      path = args.path,
      version = args.version;

  if (version) {
    return console.log(_package.version);
  }

  if (help) {
    return console.log('TODO');
  }

  var src = _[0];
  var dest = _[1];

  var _Excludes = new _excludes["default"](exclude),
      excludes = _Excludes.excludes;

  var options = {
    excludes: excludes,
    override: override,
    path: path // validate path

  };
  var validator = new _validator["default"](src, dest, options);
  return executeCommand(validator, dry);
};

var executeCommand = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(validator, dry) {
    var src, dest, excludes, path, traverser;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            src = validator.src, dest = validator.dest, excludes = validator.excludes, path = validator.path;
            traverser = new _traverser["default"](path, {
              src: src,
              dest: dest,
              excludes: excludes
            });
            _context.next = 4;
            return traverser.traverse({
              dry: dry
            });

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function executeCommand(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

rename(argv);