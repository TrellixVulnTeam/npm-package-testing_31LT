"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _colors = _interopRequireDefault(require("colors"));

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var fs = _bluebird["default"].promisifyAll(require('fs'));

var readdirAsync = fs.readdirAsync,
    renameAsync = fs.renameAsync,
    statAsync = fs.statAsync;

var Traverser = /*#__PURE__*/function () {
  function Traverser(initialPath, options) {
    (0, _classCallCheck2["default"])(this, Traverser);
    var excludes = options.excludes,
        dest = options.dest,
        src = options.src;
    this.initialPath = initialPath;
    this.excludes = excludes;
    this.dest = dest;
    this.src = src.split('.');
  }

  (0, _createClass2["default"])(Traverser, [{
    key: "traverse",
    value: function () {
      var _traverse = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var options,
            rootPath,
            dry,
            files,
            _iterator,
            _step,
            file,
            filePath,
            stats,
            _args = arguments;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                rootPath = _args.length > 1 && _args[1] !== undefined ? _args[1] : this.initialPath;
                dry = options.dry;
                _context.next = 5;
                return readdirAsync(rootPath);

              case 5:
                files = _context.sent;
                _iterator = _createForOfIteratorHelper(files);
                _context.prev = 7;

                _iterator.s();

              case 9:
                if ((_step = _iterator.n()).done) {
                  _context.next = 24;
                  break;
                }

                file = _step.value;
                filePath = makePath(rootPath, file);
                _context.next = 14;
                return statAsync(filePath);

              case 14:
                stats = _context.sent;

                if (!(stats.isDirectory() && !this.excludes.has(file))) {
                  _context.next = 20;
                  break;
                }

                _context.next = 18;
                return this.traverse(options, filePath);

              case 18:
                _context.next = 22;
                break;

              case 20:
                _context.next = 22;
                return handleFile(file, filePath, this.src, this.dest, dry);

              case 22:
                _context.next = 9;
                break;

              case 24:
                _context.next = 29;
                break;

              case 26:
                _context.prev = 26;
                _context.t0 = _context["catch"](7);

                _iterator.e(_context.t0);

              case 29:
                _context.prev = 29;

                _iterator.f();

                return _context.finish(29);

              case 32:
                return _context.abrupt("return", _bluebird["default"].resolve());

              case 33:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 26, 29, 32]]);
      }));

      function traverse() {
        return _traverse.apply(this, arguments);
      }

      return traverse;
    }()
  }]);
  return Traverser;
}();

var handleFile = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(file, filePath, src, dest, dry) {
    var splitFilePath, match, i, filePathNoExt;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            splitFilePath = filePath.split('.');
            match = true;

            for (i = src.length - 1; i >= 0 && match; i--) {
              if (src[i] !== splitFilePath.pop()) {
                match = false;
              }
            }

            filePathNoExt = splitFilePath.join('.');

            if (!match) {
              _context2.next = 12;
              break;
            }

            if (!dry) {
              _context2.next = 9;
              break;
            }

            console.log('Will Rename: '.blue + "".concat(filePath).red + ' --> '.yellow + "".concat(filePathNoExt, ".").concat(dest).green);
            _context2.next = 12;
            break;

          case 9:
            console.log('Renamed: '.blue + "".concat(filePath).red + ' --> '.yellow + "".concat(filePathNoExt, ".").concat(dest).green);
            _context2.next = 12;
            return renameAsync(filePath, "".concat(filePathNoExt, ".").concat(dest));

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function handleFile(_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();

var makePath = function makePath() {
  var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : __dirname;
  var file = arguments.length > 1 ? arguments[1] : undefined;
  return _path["default"].join(base, file);
};

var _default = Traverser;
exports["default"] = _default;